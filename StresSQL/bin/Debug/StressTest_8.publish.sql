/*
Deployment script for StressTest

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "StressTest"
:setvar DefaultFilePrefix "StressTest"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL13.SQL2016\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL13.SQL2016\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Dropping [dbo].[usp_GetPopSlotId]...';


GO
DROP PROCEDURE [dbo].[usp_GetPopSlotId];


GO
PRINT N'Dropping [dbo].[usp_GetPopSlotIdNode0]...';


GO
DROP PROCEDURE [dbo].[usp_GetPopSlotIdNode0];


GO
PRINT N'Dropping [dbo].[usp_GetPopSlotIdNode1]...';


GO
DROP PROCEDURE [dbo].[usp_GetPopSlotIdNode1];


GO
PRINT N'Dropping [dbo].[usp_GetPushSlotId]...';


GO
DROP PROCEDURE [dbo].[usp_GetPushSlotId];


GO
PRINT N'Dropping [dbo].[usp_GetPushSlotIdNode0]...';


GO
DROP PROCEDURE [dbo].[usp_GetPushSlotIdNode0];


GO
PRINT N'Dropping [dbo].[usp_GetPushSlotIdNode1]...';


GO
DROP PROCEDURE [dbo].[usp_GetPushSlotIdNode1];


GO
PRINT N'Dropping [dbo].[usp_PushMessageImOltpNoSequence]...';


GO
DROP PROCEDURE [dbo].[usp_PushMessageImOltpNoSequence];


GO
PRINT N'Creating [dbo].[usp_GetPopSlotId]...';


GO

CREATE PROCEDURE [dbo].[usp_GetPopSlotId]  @Slot      bigint OUTPUT
                                         ,@QueueSize int = 4000000
WITH NATIVE_COMPILATION, SCHEMABINDING
AS
BEGIN ATOMIC
WITH ( TRANSACTION ISOLATION LEVEL = SNAPSHOT
      ,LANGUAGE                    = N'us_english')
    INSERT INTO dbo.NonBlockingPopSequence
        DEFAULT VALUES;

    SELECT @Slot = SCOPE_IDENTITY();

	DELETE FROM dbo.NonBlockingPopSequence WHERE ID = @Slot;

	SET @Slot = @Slot % @QueueSize;

	IF @Slot % 10 = 1
	BEGIN
		SET @Slot += 5000000000;
	END
	ELSE IF @Slot % 10 = 2
    BEGIN	
	    SET @Slot += 1000000000;
	END
	ELSE IF @Slot % 10 = 3
    BEGIN	
	    SET @Slot += 8000000000;
	END
	ELSE IF @Slot % 10 = 4
    BEGIN	
	    SET @Slot += 2000000000;
	END
	ELSE IF @Slot % 10 = 5
    BEGIN	
	    SET @Slot += 7000000000;
	END
	ELSE IF @Slot % 10 = 6
    BEGIN	
	    SET @Slot += 3000000000;
	END
	ELSE IF @Slot % 10 = 7
    BEGIN	
	    SET @Slot += 6000000000;
	END
	ELSE IF @Slot % 10 = 8
    BEGIN	
	    SET @Slot += 4000000000;
	END
	ELSE IF @Slot % 10 = 9
    BEGIN	
	    SET @Slot += 1000000000;
	END;
END;
GO
PRINT N'Creating [dbo].[usp_GetPopSlotIdNode0]...';


GO
CREATE PROCEDURE [dbo].[usp_GetPopSlotIdNode0]  @Slot      bigint OUTPUT
                                               ,@QueueSize int = 4000000
WITH NATIVE_COMPILATION, SCHEMABINDING
AS
BEGIN ATOMIC
WITH ( TRANSACTION ISOLATION LEVEL = SNAPSHOT
      ,LANGUAGE                    = N'us_english')
    INSERT INTO dbo.NonBlockingPopSequenceNode0
        DEFAULT VALUES;

    SELECT @Slot = SCOPE_IDENTITY();

	DELETE FROM dbo.NonBlockingPopSequenceNode0
	WHERE ID = @Slot;

	SET @Slot = @Slot % @QueueSize;

	IF @Slot % 10 = 1
	BEGIN
		SET @Slot += 5000000000;
	END
	ELSE IF @Slot % 10 = 2
    BEGIN	
	    SET @Slot += 1000000000;
	END
	ELSE IF @Slot % 10 = 3
    BEGIN	
	    SET @Slot += 8000000000;
	END
	ELSE IF @Slot % 10 = 4
    BEGIN	
	    SET @Slot += 2000000000;
	END
	ELSE IF @Slot % 10 = 5
    BEGIN	
	    SET @Slot += 7000000000;
	END
	ELSE IF @Slot % 10 = 6
    BEGIN	
	    SET @Slot += 3000000000;
	END
	ELSE IF @Slot % 10 = 7
    BEGIN	
	    SET @Slot += 6000000000;
	END
	ELSE IF @Slot % 10 = 8
    BEGIN	
	    SET @Slot += 4000000000;
	END
	ELSE IF @Slot % 10 = 9
    BEGIN	
	    SET @Slot += 1000000000;
	END;
END;
GO
PRINT N'Creating [dbo].[usp_GetPopSlotIdNode1]...';


GO
CREATE PROCEDURE [dbo].[usp_GetPopSlotIdNode1]  @Slot      bigint OUTPUT
                                               ,@QueueSize int = 4000000
WITH NATIVE_COMPILATION, SCHEMABINDING
AS
BEGIN ATOMIC
WITH ( TRANSACTION ISOLATION LEVEL = SNAPSHOT
      ,LANGUAGE                    = N'us_english')
    INSERT INTO dbo.NonBlockingPopSequenceNode1
        DEFAULT VALUES;

    SELECT @Slot = SCOPE_IDENTITY();

	DELETE FROM dbo.NonBlockingPopSequenceNode1
	WHERE ID = @Slot;

	SET @Slot = @Slot % @QueueSize;

	IF @Slot % 10 = 1
	BEGIN
		SET @Slot += 5000000000;
	END
	ELSE IF @Slot % 10 = 2
    BEGIN	
	    SET @Slot += 1000000000;
	END
	ELSE IF @Slot % 10 = 3
    BEGIN	
	    SET @Slot += 8000000000;
	END
	ELSE IF @Slot % 10 = 4
    BEGIN	
	    SET @Slot += 2000000000;
	END
	ELSE IF @Slot % 10 = 5
    BEGIN	
	    SET @Slot += 7000000000;
	END
	ELSE IF @Slot % 10 = 6
    BEGIN	
	    SET @Slot += 3000000000;
	END
	ELSE IF @Slot % 10 = 7
    BEGIN	
	    SET @Slot += 6000000000;
	END
	ELSE IF @Slot % 10 = 8
    BEGIN	
	    SET @Slot += 4000000000;
	END
	ELSE IF @Slot % 10 = 9
    BEGIN	
	    SET @Slot += 1000000000;
	END;
END;
GO
PRINT N'Creating [dbo].[usp_GetPushSlotId]...';


GO



CREATE PROCEDURE [dbo].[usp_GetPushSlotId]  @Slot      bigint OUTPUT
                                          ,@QueueSize int = 4000000
WITH NATIVE_COMPILATION, SCHEMABINDING
AS
BEGIN ATOMIC
WITH ( TRANSACTION ISOLATION LEVEL = SNAPSHOT
      ,LANGUAGE                    = N'us_english')
    INSERT INTO dbo.NonBlockingPushSequence
        DEFAULT VALUES;

    SELECT @Slot = SCOPE_IDENTITY();

    DELETE FROM dbo.NonBlockingPushSequence
	WHERE ID = @Slot;

	SET @Slot = @Slot % @QueueSize;

	IF @Slot % 10 = 1
	BEGIN
		SET @Slot += 5000000000;
	END
	ELSE IF @Slot % 10 = 2
    BEGIN	
	    SET @Slot += 1000000000;
	END
	ELSE IF @Slot % 10 = 3
    BEGIN	
	    SET @Slot += 8000000000;
	END
	ELSE IF @Slot % 10 = 4
    BEGIN	
	    SET @Slot += 2000000000;
	END
	ELSE IF @Slot % 10 = 5
    BEGIN	
	    SET @Slot += 7000000000;
	END
	ELSE IF @Slot % 10 = 6
    BEGIN	
	    SET @Slot += 3000000000;
	END
	ELSE IF @Slot % 10 = 7
    BEGIN	
	    SET @Slot += 6000000000;
	END
	ELSE IF @Slot % 10 = 8
    BEGIN	
	    SET @Slot += 4000000000;
	END
	ELSE IF @Slot % 10 = 9
    BEGIN	
	    SET @Slot += 1000000000;
	END;
END;
GO
PRINT N'Creating [dbo].[usp_GetPushSlotIdNode0]...';


GO
CREATE PROCEDURE [dbo].[usp_GetPushSlotIdNode0]  @Slot      bigint OUTPUT
                                               ,@QueueSize int = 4000000
WITH NATIVE_COMPILATION, SCHEMABINDING
AS
BEGIN ATOMIC
WITH ( TRANSACTION ISOLATION LEVEL = SNAPSHOT
      ,LANGUAGE                    = N'us_english')
    INSERT INTO dbo.NonBlockingPushSequenceNode0
        DEFAULT VALUES;

    SELECT @Slot = SCOPE_IDENTITY();

	DELETE FROM dbo.NonBlockingPushSequenceNode0
	WHERE ID = @Slot;

	SET @Slot = @Slot % @QueueSize;

	IF @Slot % 10 = 1
	BEGIN
		SET @Slot += 5000000000;
	END
	ELSE IF @Slot % 10 = 2
    BEGIN	
	    SET @Slot += 1000000000;
	END
	ELSE IF @Slot % 10 = 3
    BEGIN	
	    SET @Slot += 8000000000;
	END
	ELSE IF @Slot % 10 = 4
    BEGIN	
	    SET @Slot += 2000000000;
	END
	ELSE IF @Slot % 10 = 5
    BEGIN	
	    SET @Slot += 7000000000;
	END
	ELSE IF @Slot % 10 = 6
    BEGIN	
	    SET @Slot += 3000000000;
	END
	ELSE IF @Slot % 10 = 7
    BEGIN	
	    SET @Slot += 6000000000;
	END
	ELSE IF @Slot % 10 = 8
    BEGIN	
	    SET @Slot += 4000000000;
	END
	ELSE IF @Slot % 10 = 9
    BEGIN	
	    SET @Slot += 1000000000;
	END;
END;
GO
PRINT N'Creating [dbo].[usp_GetPushSlotIdNode1]...';


GO


CREATE PROCEDURE [dbo].[usp_GetPushSlotIdNode1]  @Slot      bigint OUTPUT
                                                ,@QueueSize int = 4000000
WITH NATIVE_COMPILATION, SCHEMABINDING
AS
BEGIN ATOMIC
WITH ( TRANSACTION ISOLATION LEVEL = SNAPSHOT
      ,LANGUAGE                    = N'us_english')
    INSERT INTO dbo.NonBlockingPushSequenceNode1
        DEFAULT VALUES;

    SELECT @Slot = SCOPE_IDENTITY();

	DELETE FROM dbo.NonBlockingPushSequenceNode1
	WHERE ID = @Slot;

	SET @Slot = @Slot % @QueueSize;

	IF @Slot % 10 = 1
	BEGIN
		SET @Slot += 5000000000;
	END
	ELSE IF @Slot % 10 = 2
    BEGIN	
	    SET @Slot += 1000000000;
	END
	ELSE IF @Slot % 10 = 3
    BEGIN	
	    SET @Slot += 8000000000;
	END
	ELSE IF @Slot % 10 = 4
    BEGIN	
	    SET @Slot += 2000000000;
	END
	ELSE IF @Slot % 10 = 5
    BEGIN	
	    SET @Slot += 7000000000;
	END
	ELSE IF @Slot % 10 = 6
    BEGIN	
	    SET @Slot += 3000000000;
	END
	ELSE IF @Slot % 10 = 7
    BEGIN	
	    SET @Slot += 6000000000;
	END
	ELSE IF @Slot % 10 = 8
    BEGIN	
	    SET @Slot += 4000000000;
	END
	ELSE IF @Slot % 10 = 9
    BEGIN	
	    SET @Slot += 1000000000;
	END;
END;
GO
PRINT N'Altering [dbo].[usp_InsertSpid]...';


GO

ALTER PROCEDURE [dbo].[usp_InsertSpid]
     @TransactionsPerThread int = 500000
    ,@CommitBatchSize       int = 2
AS
BEGIN
    SET XACT_ABORT ON;
    SET NOCOUNT ON;
 
    DECLARE   @i      INTEGER = 0
	         ,@j      INTEGER = 0
             ,@base   BIGINT  = @@SPID * 10000000000;
 
    WHILE @i < @TransactionsPerThread
    BEGIN
        BEGIN TRANSACTION
		    WHILE @j < @CommitBatchSize
			BEGIN
				INSERT INTO dbo.MyBigTable (c1)
				VALUES  (@base + @i); 
				SET @j += 1;
			END;
        COMMIT;

		SET @j = 0;
        SET @i += 1;
    END;
END;
GO
PRINT N'Altering [dbo].[usp_PushMessageDiskSequence]...';


GO
ALTER PROCEDURE [dbo].[usp_PushMessageDiskSequence]  @MessagePushed int OUTPUT
                                                     ,@QueueSize     int = 4000000
AS
BEGIN 
    DECLARE  @Message  char(300)
	        ,@Slot     bigint;

    SET NOCOUNT ON;

    SET @MessagePushed = 0;

	WHILE @MessagePushed = 0
	BEGIN
		SELECT @Slot = NEXT VALUE FOR [dbo].[PushSequence] % @QueueSize

		SET @Slot = (CASE RIGHT(@Slot, 1)
						 WHEN 1
							 THEN @Slot + 5000000000
						 WHEN 2
							 THEN @Slot + 1000000000
						 WHEN 3
							 THEN @Slot + 8000000000
						 WHEN 4
							 THEN @Slot + 2000000000
						 WHEN 5
							 THEN @Slot + 7000000000
						 WHEN 6
							 THEN @Slot + 3000000000
						 WHEN 7
							 THEN @Slot + 6000000000
						 WHEN 8
							 THEN @Slot + 4000000000
						 WHEN 9
							 THEN @Slot + 9000000000
						 ELSE
							 @Slot
					 END );					   

		UPDATE  [dbo].[MyQLmax] WITH (ROWLOCK)
		SET      time            = GETDATE()
			    ,@Message        = [message]
			    ,message_id      = @Slot
			    ,reference_count = reference_count + 1
		WHERE   Slot            = @Slot
		AND     reference_count = 0
		OPTION  (MAXDOP 1);

		SET @MessagePushed = @@ROWCOUNT;
	END
END;
GO
PRINT N'Creating [dbo].[usp_PushMessageImOltpNoSequence]...';


GO
CREATE PROCEDURE [dbo].[usp_PushMessageImOltpNoSequence]  
WITH NATIVE_COMPILATION, SCHEMABINDING
AS
BEGIN ATOMIC
    WITH ( TRANSACTION ISOLATION LEVEL = SNAPSHOT
          ,LANGUAGE                    = N'us_english')

    DECLARE  @MessagePushed int
	        ,@QueueSize     int = 200000
			,@Slot          int;

	SET @MessagePushed = 0;

	WHILE @MessagePushed = 0
	BEGIN
		INSERT INTO [dbo].[NonBlockingSequence]
			DEFAULT VALUES;

		SELECT @Slot = SCOPE_IDENTITY();
	
		DELETE FROM [dbo].[NonBlockingSequence] WHERE ID = @Slot;
		
		UPDATE [dbo].[MyQLmaxImOltp]
		SET     time            = GETDATE()
			   ,message         = 'Hello world'
			   ,message_id      = @Slot
			   ,reference_count = reference_count + 1
		WHERE   Slot            = @Slot % @QueueSize
		AND     reference_count = 0;

		SET @MessagePushed = @@ROWCOUNT;
	END;
END;
GO
PRINT N'Creating [dbo].[usp_PopMessageDiskNoSequenceNode0]...';


GO
CREATE PROCEDURE [dbo].[usp_PopMessageDiskNoSequenceNode0]  @MessagePopped int OUTPUT
                                                           ,@QueueSize     int = 4000000
AS
BEGIN 
    DECLARE  @Message  char(300)
	        ,@Slot     bigint;

    SET NOCOUNT ON;

    SET @MessagePopped = 0;

	WHILE @MessagePopped = 0
	BEGIN
	    EXEC [dbo].[usp_GetPopSlotIdNode0] @Slot;

		UPDATE [dbo].[MyQLmaxNode0] WITH (ROWLOCK)
		SET     time            = GETDATE()
			   ,@Message        = [message]
			   ,message_id      = @Slot
			   ,reference_count = reference_count - 1
		WHERE   Slot            = @Slot
		AND     reference_count = 1
		OPTION  (MAXDOP 1);

		SET    @MessagePopped = @@ROWCOUNT;
	END
END;
GO
PRINT N'Creating [dbo].[usp_PopMessageDiskNoSequenceNode1]...';


GO
CREATE PROCEDURE [dbo].[usp_PopMessageDiskNoSequenceNode1]  @MessagePopped int OUTPUT
                                                           ,@QueueSize     int = 4000000
AS
BEGIN 
    DECLARE  @Message  char(300)
	        ,@Slot     bigint;

    SET NOCOUNT ON;

    SET @MessagePopped = 0;

	WHILE @MessagePopped = 0
	BEGIN
	    EXEC [dbo].[usp_GetPopSlotIdNode1] @Slot;

		UPDATE [dbo].[MyQLmaxNode1] WITH (ROWLOCK)
		SET     time            = GETDATE()
			   ,@Message        = [message]
			   ,message_id      = @Slot
			   ,reference_count = reference_count - 1
		WHERE   Slot            = @Slot
		AND     reference_count = 1
		OPTION  (MAXDOP 1);

		SET    @MessagePopped = @@ROWCOUNT;
	END
END;
GO
PRINT N'Creating [dbo].[usp_PopMessageDiskSequence]...';


GO
CREATE PROCEDURE [dbo].[usp_PopMessageDiskSequence]  @MessagePopped int OUTPUT
                                                    ,@QueueSize     int = 4000000
AS
BEGIN 
    DECLARE  @Message  char(300)
	        ,@Slot     bigint;

    SET NOCOUNT ON;

    SET @MessagePopped = 0;

	WHILE @MessagePopped = 0
	BEGIN
		SELECT @Slot = NEXT VALUE FOR [dbo].[PopSequence] % @QueueSize

		SET @Slot = (CASE RIGHT(@Slot, 1)
						 WHEN 1
							 THEN @Slot + 5000000000
						 WHEN 2
							 THEN @Slot + 1000000000
						 WHEN 3
							 THEN @Slot + 8000000000
						 WHEN 4
							 THEN @Slot + 2000000000
						 WHEN 5
							 THEN @Slot + 7000000000
						 WHEN 6
							 THEN @Slot + 3000000000
						 WHEN 7
							 THEN @Slot + 6000000000
						 WHEN 8
							 THEN @Slot + 4000000000
						 WHEN 9
							 THEN @Slot + 9000000000
						 ELSE
							 @Slot
					 END );					   

		UPDATE  [dbo].[MyQLmax] WITH (ROWLOCK)
		SET      time            = GETDATE()
			    ,@Message        = [message]
			    ,message_id      = @Slot
			    ,reference_count = reference_count - 1
		WHERE   Slot            = @Slot
		AND     reference_count = 1
		OPTION  (MAXDOP 1);

		SET @MessagePopped = @@ROWCOUNT;
	END
END;
GO
PRINT N'Creating [dbo].[usp_PopMessageDiskSequenceNode0]...';


GO
CREATE PROCEDURE [dbo].[usp_PopMessageDiskSequenceNode0]  @MessagePopped int OUTPUT
                                                         ,@QueueSize     int = 4000000
AS
BEGIN 
    DECLARE  @Message  char(300)
	        ,@Slot     bigint;

    SET NOCOUNT ON;

    SET @MessagePopped = 0;

	WHILE @MessagePopped = 0
	BEGIN
		SELECT @Slot = NEXT VALUE FOR [dbo].[PopSequenceNode0] % @QueueSize

		SET @Slot = (CASE RIGHT(@Slot, 1)
						 WHEN 1
							 THEN @Slot + 5000000000
						 WHEN 2
							 THEN @Slot + 1000000000
						 WHEN 3
							 THEN @Slot + 8000000000
						 WHEN 4
							 THEN @Slot + 2000000000
						 WHEN 5
							 THEN @Slot + 7000000000
						 WHEN 6
							 THEN @Slot + 3000000000
						 WHEN 7
							 THEN @Slot + 6000000000
						 WHEN 8
							 THEN @Slot + 4000000000
						 WHEN 9
							 THEN @Slot + 9000000000
						 ELSE
							 @Slot
					 END );					   

		UPDATE [dbo].[MyQLmaxNode0] WITH (ROWLOCK)
		SET     time            = GETDATE()
			   ,@Message        = [message]
			   ,message_id      = @Slot
			   ,reference_count = reference_count - 1
		WHERE   Slot            = @Slot
		AND     reference_count = 1
		OPTION  (MAXDOP 1);

		SET    @MessagePopped = @@ROWCOUNT;
	END
END;
GO
PRINT N'Creating [dbo].[usp_PopMessageDiskSequenceNode1]...';


GO
CREATE PROCEDURE [dbo].[usp_PopMessageDiskSequenceNode1]  @MessagePopped int OUTPUT
                                                         ,@QueueSize     int = 4000000
AS
BEGIN 
    DECLARE  @Message char(300)
	        ,@Slot    bigint;

    SET NOCOUNT ON;

    SET @MessagePopped = 0;

	WHILE @MessagePopped = 0
	BEGIN
		SELECT @Slot = NEXT VALUE FOR [dbo].[PopSequenceNode1] % @QueueSize

		SET @Slot = (CASE RIGHT(@Slot, 1)
						 WHEN 1
							 THEN @Slot + 5000000000
						 WHEN 2
							 THEN @Slot + 1000000000
						 WHEN 3
							 THEN @Slot + 8000000000
						 WHEN 4
							 THEN @Slot + 2000000000
						 WHEN 5
							 THEN @Slot + 7000000000
						 WHEN 6
							 THEN @Slot + 3000000000
						 WHEN 7
							 THEN @Slot + 6000000000
						 WHEN 8
							 THEN @Slot + 4000000000
						 WHEN 9
							 THEN @Slot + 9000000000
						 ELSE
							 @Slot
					 END );					   

		UPDATE [dbo].[MyQLmaxNode1] WITH (ROWLOCK)
		SET     time            = GETDATE()
			   ,@Message        = [message]
			   ,message_id      = @Slot
			   ,reference_count = reference_count - 1
		WHERE   Slot            = @Slot
		AND     reference_count = 1
		OPTION  (MAXDOP 1);

		SET    @MessagePopped = @@ROWCOUNT;
	END
END;
GO
PRINT N'Creating [dbo].[usp_PushMessageDiskNoSequence]...';


GO
CREATE PROCEDURE [dbo].[usp_PushMessageDiskNoSequence]  @MessagePushed int OUTPUT
                                                       ,@QueueSize     int = 4000000
AS
BEGIN 
    DECLARE  @Message  char(300)
	        ,@Slot     bigint;

    SET NOCOUNT ON;

    SET @MessagePushed = 0;

	WHILE @MessagePushed = 0
	BEGIN
	    EXEC dbo.usp_GetPushSlotId @Slot OUTPUT;

		UPDATE  [dbo].[MyQLmax] WITH (ROWLOCK)
		SET      time            = GETDATE()
			    ,@Message        = [message]
			    ,message_id      = @Slot
			    ,reference_count = reference_count + 1
		WHERE   Slot            = @Slot
		AND     reference_count = 0
		OPTION  (MAXDOP 1);

		SET @MessagePushed = @@ROWCOUNT;
	END
END;
GO
PRINT N'Creating [dbo].[usp_PushMessageDiskNoSequenceNode0]...';


GO

CREATE PROCEDURE [dbo].[usp_PushMessageDiskNoSequenceNode0]  @MessagePushed int OUTPUT
                                                            ,@QueueSize     int = 4000000
AS
BEGIN 
    DECLARE @Slot bigint;

    SET NOCOUNT ON;

    SET @MessagePushed = 0;

	WHILE @MessagePushed = 0
	BEGIN
		EXEC usp_GetPushSlotIdNode0 @Slot;

		UPDATE [dbo].[MyQLmaxNode0]	WITH (ROWLOCK)
		SET     time            = GETDATE()
			   ,message         = 'Hello world'
			   ,message_id      = @Slot
			   ,reference_count = reference_count + 1
		WHERE   Slot            = @Slot
		AND     reference_count = 0
		OPTION  (MAXDOP 1);

		SET    @MessagePushed = @@ROWCOUNT;
	END
END;
GO
PRINT N'Creating [dbo].[usp_PushMessageDiskNoSequenceNode1]...';


GO

CREATE PROCEDURE [dbo].[usp_PushMessageDiskNoSequenceNode1]  @MessagePushed int OUTPUT
                                                            ,@QueueSize     int = 4000000
AS
BEGIN 
    DECLARE @Slot bigint;

    SET NOCOUNT ON;

    SET @MessagePushed = 0;

	WHILE @MessagePushed = 0
	BEGIN
		EXEC usp_GetPushSlotIdNode1 @Slot;

		UPDATE [dbo].[MyQLmaxNode1]	WITH (ROWLOCK)
		SET     time            = GETDATE()
			   ,message         = 'Hello world'
			   ,message_id      = @Slot
			   ,reference_count = reference_count + 1
		WHERE   Slot            = @Slot
		AND     reference_count = 0
		OPTION  (MAXDOP 1);

		SET    @MessagePushed = @@ROWCOUNT;
	END
END;
GO
PRINT N'Creating [dbo].[usp_PushMessageDiskSequenceNode0]...';


GO
CREATE PROCEDURE [dbo].[usp_PushMessageDiskSequenceNode0]  @MessagePushed int OUTPUT
                                                          ,@QueueSize     int = 4000000
AS
BEGIN 
    DECLARE @Slot bigint;

    SET NOCOUNT ON;

    SET @MessagePushed = 0;

	WHILE @MessagePushed = 0
	BEGIN
		SELECT @Slot = NEXT VALUE FOR [dbo].[PushSequenceNode0] % @QueueSize

		SET @Slot = (CASE RIGHT(@Slot, 1)
						 WHEN 1
							 THEN @Slot + 5000000000
						 WHEN 2
							 THEN @Slot + 1000000000
						 WHEN 3
							 THEN @Slot + 8000000000
						 WHEN 4
							 THEN @Slot + 2000000000
						 WHEN 5
							 THEN @Slot + 7000000000
						 WHEN 6
							 THEN @Slot + 3000000000
						 WHEN 7
							 THEN @Slot + 6000000000
						 WHEN 8
							 THEN @Slot + 4000000000
						 WHEN 9
							 THEN @Slot + 9000000000
						 ELSE
							 @Slot
					 END );					   

		UPDATE [dbo].[MyQLmaxNode0]	WITH (ROWLOCK)
		SET     time            = GETDATE()
			   ,message         = 'Hello world'
			   ,message_id      = @Slot
			   ,reference_count = reference_count + 1
		WHERE   Slot            = @Slot
		AND     reference_count = 0
		OPTION  (MAXDOP 1);

		SET    @MessagePushed = @@ROWCOUNT;
	END
END;
GO
PRINT N'Creating [dbo].[usp_PushMessageDiskSequenceNode1]...';


GO
CREATE PROCEDURE [dbo].[usp_PushMessageDiskSequenceNode1]  @MessagePushed int OUTPUT
                                                          ,@QueueSize     int = 4000000
AS
BEGIN 
    DECLARE @Slot bigint;

    SET NOCOUNT ON;

    SET @MessagePushed = 0;

	WHILE @MessagePushed = 0
	BEGIN
		SELECT @Slot = NEXT VALUE FOR [dbo].[PushSequenceNode1] % @QueueSize

		SET @Slot = (CASE RIGHT(@Slot, 1)
						 WHEN 1
							 THEN @Slot + 5000000000
						 WHEN 2
							 THEN @Slot + 1000000000
						 WHEN 3
							 THEN @Slot + 8000000000
						 WHEN 4
							 THEN @Slot + 2000000000
						 WHEN 5
							 THEN @Slot + 7000000000
						 WHEN 6
							 THEN @Slot + 3000000000
						 WHEN 7
							 THEN @Slot + 6000000000
						 WHEN 8
							 THEN @Slot + 4000000000
						 WHEN 9
							 THEN @Slot + 9000000000
						 ELSE
							 @Slot
					 END );					   

		UPDATE [dbo].[MyQLmaxNode1] WITH (ROWLOCK)
		SET     time            = GETDATE()
			   ,message         = 'Hello world'
			   ,message_id      = @Slot
			   ,reference_count = reference_count + 1
		WHERE   Slot            = @Slot
		AND     reference_count = 0
		OPTION  (MAXDOP 1);

		SET    @MessagePushed = @@ROWCOUNT;
	END
END;
GO
PRINT N'Creating [dbo].[usp_PushMessageImOltpSequence]...';


GO


CREATE PROCEDURE [dbo].[usp_PushMessageImOltpSequence] @MessagePushed int OUTPUT
AS
BEGIN 
    DECLARE  @QueueSize int    = 4000000
	        ,@Message   char(300)
	        ,@Slot      bigint;

	SET @MessagePushed = 0;

	WHILE @MessagePushed = 0
	BEGIN
		EXEC [dbo].[usp_GetPushSlotId] @Slot OUTPUT, @QueueSize;
        EXEC [dbo].[usp_PushMessageImOltpSequence] @@MessagePushed OUTPUT;
	END;
END;
GO
PRINT N'Altering [dbo].[usp_LmaxPopDiskNumaNoSequence]...';


GO
 

ALTER PROCEDURE [dbo].[usp_LmaxPopDiskNumaNoSequence] @TransactionsPerThread int = 200000
AS 
BEGIN 
    DECLARE  @MessagePopped int
            ,@Slot          int
            ,@i             int = 0;

    SET NOCOUNT ON;

	IF EXISTS (SELECT 1
               FROM   sys.dm_exec_requests r
               JOIN   sys.dm_os_workers    w
               ON     r.task_address = w.task_address
               JOIN   sys.dm_os_schedulers s
               ON     s.scheduler_address = w.scheduler_address
               WHERE  r.session_id     = @@SPID
			   AND    s.parent_node_id = 0)
	BEGIN
		WHILE @i <= @TransactionsPerThread 
		BEGIN
			EXEC dbo.usp_PopMessageDiskNoSequenceNode0 @MessagePopped OUTPUT; 
			SET @i += 1;
		END;
	END
	ELSE
	BEGIN
		WHILE @i <= @TransactionsPerThread
		BEGIN
			EXEC dbo.usp_PopMessageDiskNoSequenceNode1 @MessagePopped OUTPUT; 
			SET @i += 1;
		END;
	END
END;
GO
PRINT N'Altering [dbo].[usp_LmaxPopDiskNumaSequence]...';


GO


ALTER PROCEDURE [dbo].[usp_LmaxPopDiskNumaSequence] @TransactionsPerThread int = 200000
AS 
BEGIN 
    DECLARE  @MessagePopped int
            ,@Slot          int
            ,@i             int = 0;

    SET NOCOUNT ON;

	IF EXISTS (SELECT 1
               FROM   sys.dm_exec_requests r
               JOIN   sys.dm_os_workers    w
               ON     r.task_address = w.task_address
               JOIN   sys.dm_os_schedulers s
               ON     s.scheduler_address = w.scheduler_address
               WHERE  r.session_id     = @@SPID
			   AND    s.parent_node_id = 0)
	BEGIN
		WHILE @i <= @TransactionsPerThread 
		BEGIN
			EXEC dbo.usp_PopMessageDiskSequenceNode0 @MessagePopped OUTPUT; 
			SET @i += 1;
		END;
	END
	ELSE
	BEGIN
		WHILE @i <= @TransactionsPerThread 
		BEGIN
			EXEC dbo.usp_PopMessageDiskSequenceNode1 @MessagePopped OUTPUT; 
			SET @i += 1;
		END;
	END
END;
GO
PRINT N'Altering [dbo].[usp_LmaxPushDiskNoSequence]...';


GO

ALTER PROCEDURE [dbo].[usp_LmaxPushDiskNoSequence] 
AS 
BEGIN 
    DECLARE  @QueueSize     int = 200000
            ,@MessagePopped int
            ,@i             int = 0;

    SET NOCOUNT ON;

	WHILE @i <= @QueueSize 
	BEGIN
		EXEC dbo.usp_PushMessageDiskNoSequence @MessagePopped OUTPUT; 
		SET @i += 1;
	END;
END;
GO
PRINT N'Altering [dbo].[usp_LmaxPushDiskNumaNoSequence]...';


GO

ALTER PROCEDURE [dbo].[usp_LmaxPushDiskNumaNoSequence] 
AS 
BEGIN 
    DECLARE  @QueueSize     int = 200000
            ,@MessagePushed int
            ,@Slot          int
            ,@i             int = 0;

    SET NOCOUNT ON;

	IF EXISTS (SELECT 1
               FROM   sys.dm_exec_requests r
               JOIN   sys.dm_os_workers    w
               ON     r.task_address = w.task_address
               JOIN   sys.dm_os_schedulers s
               ON     s.scheduler_address = w.scheduler_address
               WHERE  r.session_id     = @@SPID
			   AND    s.parent_node_id = 0)
	BEGIN
		WHILE @i <= @QueueSize 
		BEGIN
			EXEC dbo.usp_PushMessageDiskNoSequenceNode0 @MessagePushed OUTPUT; 
			SET @i += 1;
		END;
	END
	ELSE
	BEGIN
		WHILE @i <= @QueueSize 
		BEGIN
			EXEC dbo.usp_PushMessageDiskNoSequenceNode1 @MessagePushed OUTPUT; 
			SET @i += 1;
		END;
	END
END;
GO
PRINT N'Altering [dbo].[usp_LmaxPushDiskNumaSequence]...';


GO

ALTER PROCEDURE [dbo].[usp_LmaxPushDiskNumaSequence] 
AS 
BEGIN 
    DECLARE  @QueueSize     int = 200000
            ,@MessagePushed int
            ,@Slot          int
            ,@i             int = 0;

    SET NOCOUNT ON;

	IF EXISTS (SELECT 1
               FROM   sys.dm_exec_requests r
               JOIN   sys.dm_os_workers    w
               ON     r.task_address = w.task_address
               JOIN   sys.dm_os_schedulers s
               ON     s.scheduler_address = w.scheduler_address
               WHERE  r.session_id     = @@SPID
			   AND    s.parent_node_id = 0)
	BEGIN
		WHILE @i <= @QueueSize 
		BEGIN
			EXEC dbo.usp_PushMessageDiskSequenceNode0 @MessagePushed OUTPUT; 
			SET @i += 1;
		END;
	END
	ELSE
	BEGIN
		WHILE @i <= @QueueSize 
		BEGIN
			EXEC dbo.usp_PushMessageDiskSequenceNode1 @MessagePushed OUTPUT; 
			SET @i += 1;
		END;
	END
END;
GO
PRINT N'Altering [dbo].[usp_LmaxPushImOltpNoSequence]...';


GO
ALTER PROCEDURE [dbo].[usp_LmaxPushImOltpNoSequence] @TransactionsPerThread int = 200000 
AS 
BEGIN 
    DECLARE @i int = 0;

    WHILE @i <= @TransactionsPerThread 
    BEGIN
        EXEC dbo.usp_PushMessageImOltpNoSequence;
    END;
END;
GO
PRINT N'Creating [dbo].[usp_LmaxPushImOltpSequence]...';


GO
CREATE PROCEDURE [dbo].[usp_LmaxPushImOltpSequence] @TransactionsPerThread int = 200000
AS 
BEGIN 
    DECLARE  @QueueSize     int = 200000
            ,@i             int = 0;

    WHILE @i <= @TransactionsPerThread 
    BEGIN
        EXEC dbo.usp_PushMessageImOltpSequence
    END;
END;
GO
PRINT N'Refreshing [dbo].[usp_PopMessageNoSequence]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_PopMessageNoSequence]';


GO
PRINT N'Refreshing [dbo].[usp_LmaxPopDiskNoSequence]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_LmaxPopDiskNoSequence]';


GO
PRINT N'Refreshing [dbo].[usp_LmaxPushDiskSequence]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_LmaxPushDiskSequence]';


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
EXECUTE [dbo].[usp_LMaxDiskQSlotInit];
GO

GO
PRINT N'Update complete.';


GO
