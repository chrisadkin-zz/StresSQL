/*
Deployment script for StresSQL

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "StresSQL"
:setvar DefaultFilePrefix "StresSQL"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL13.SQL2016\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL13.SQL2016\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE Latin1_General_CI_AS
GO
PRINT N'Creating [FG_02]...';


GO
ALTER DATABASE [$(DatabaseName)]
    ADD FILEGROUP [FG_02];


GO
ALTER DATABASE [$(DatabaseName)]
    ADD FILE (NAME = [FG_02_270EA4D7], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_FG_02_270EA4D7.mdf') TO FILEGROUP [FG_02];


GO
PRINT N'Creating [imoltp_mod]...';


GO
ALTER DATABASE [$(DatabaseName)]
    ADD FILEGROUP [imoltp_mod] CONTAINS MEMORY_OPTIMIZED_DATA;


GO
ALTER DATABASE [$(DatabaseName)]
    ADD FILE (NAME = [imoltp_mod_660BC46B], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_imoltp_mod_660BC46B.mdf') TO FILEGROUP [imoltp_mod];


GO
PRINT N'Creating [FG_01]...';


GO
ALTER DATABASE [$(DatabaseName)]
    ADD FILEGROUP [FG_01];


GO
ALTER DATABASE [$(DatabaseName)]
    ADD FILE (NAME = [FG_01_7CA601C8], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_FG_01_7CA601C8.mdf') TO FILEGROUP [FG_01];


GO
ALTER DATABASE [$(DatabaseName)]
    MODIFY FILEGROUP [FG_01] DEFAULT;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [CLRUtils]...';


GO
CREATE ASSEMBLY [CLRUtils]
    AUTHORIZATION [dbo]
    FROM 0x


GO
PRINT N'Creating [HashPartition_FN]...';


GO
CREATE PARTITION FUNCTION [HashPartition_FN](BIGINT)
    AS RANGE
    FOR VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41);


GO
PRINT N'Creating [RangePf]...';


GO
CREATE PARTITION FUNCTION [RangePf](INT)
    AS RANGE
    FOR VALUES (1561677, 3123186, 4688695, 6255394, 7816404, 9380845, 10945302, 12503970, 14066098, 15632836, 17191004, 18756672, 20320177, 21877326, 23439807, 25003700, 26571719, 28137576, 29699620, 31263294);


GO
PRINT N'Creating [HashPartition_SC]...';


GO
CREATE PARTITION SCHEME [HashPartition_SC]
    AS PARTITION [HashPartition_FN]
    TO ([FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01]);


GO
PRINT N'Creating [RangePs]...';


GO
CREATE PARTITION SCHEME [RangePs]
    AS PARTITION [RangePf]
    TO ([FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01], [FG_01]);


GO
PRINT N'Creating [dbo].[MyBigTable]...';


GO
CREATE TABLE [dbo].[MyBigTable] (
    [c1] BIGINT     NOT NULL,
    [c2] DATETIME   NULL,
    [c3] CHAR (111) NULL,
    [c4] INT        NULL,
    [c5] INT        NULL,
    [c6] BIGINT     NULL,
    CONSTRAINT [PK_BigTable] PRIMARY KEY CLUSTERED ([c1] ASC)
);


GO
PRINT N'Creating [dbo].[MyBigTableGuid]...';


GO
CREATE TABLE [dbo].[MyBigTableGuid] (
    [c1] UNIQUEIDENTIFIER NOT NULL,
    [c2] DATETIME         NULL,
    [c3] CHAR (111)       NULL,
    [c4] INT              NULL,
    [c5] INT              NULL,
    [c6] BIGINT           NULL,
    CONSTRAINT [PK_BigTableGuid] PRIMARY KEY CLUSTERED ([c1] ASC)
);


GO
PRINT N'Creating [dbo].[MyBigTableHash]...';


GO
CREATE TABLE [dbo].[MyBigTableHash] (
    [PartId] BIGINT           NOT NULL,
    [c1]     UNIQUEIDENTIFIER NOT NULL,
    [c2]     DATETIME         NULL,
    [c3]     CHAR (111)       NULL,
    [c4]     INT              NULL,
    [c5]     INT              NULL,
    [c6]     BIGINT           NULL,
    CONSTRAINT [PK_BigTableHash] PRIMARY KEY CLUSTERED ([PartId] ASC, [c1] ASC) ON [HashPartition_SC] ([PartId])
);


GO
PRINT N'Creating [dbo].[MyBigTableSeedData]...';


GO
CREATE TABLE [dbo].[MyBigTableSeedData] (
    [c1] BIGINT     NOT NULL,
    [c2] DATETIME   NULL,
    [c3] CHAR (111) NULL,
    [c4] INT        NULL,
    [c5] INT        NULL,
    [c6] BIGINT     NULL
);


GO
PRINT N'Creating [dbo].[MyQLmax]...';


GO
CREATE TABLE [dbo].[MyQLmax] (
    [Slot]            BIGINT     NOT NULL,
    [message_id]      BIGINT     NULL,
    [time]            DATETIME   NOT NULL,
    [message]         CHAR (300) NOT NULL,
    [reference_count] TINYINT    NOT NULL
);


GO
PRINT N'Creating [dbo].[MyQLmax].[CIX]...';


GO
CREATE CLUSTERED INDEX [CIX]
    ON [dbo].[MyQLmax]([Slot] ASC);


GO
PRINT N'Creating [dbo].[MyQLmaxImOltp]...';


GO
CREATE TABLE [dbo].[MyQLmaxImOltp] (
    [Slot]            BIGINT     IDENTITY (1, 1) NOT NULL,
    [message_id]      BIGINT     NULL,
    [time]            DATETIME   NOT NULL,
    [message]         CHAR (300) NOT NULL,
    [reference_count] TINYINT    NOT NULL,
    PRIMARY KEY NONCLUSTERED HASH ([Slot]) WITH (BUCKET_COUNT = 4194304)
)
WITH (MEMORY_OPTIMIZED = ON);


GO
PRINT N'Creating [dbo].[MyQLmaxImOltpRI]...';


GO
CREATE TABLE [dbo].[MyQLmaxImOltpRI] (
    [Slot]            BIGINT     IDENTITY (1, 1) NOT NULL,
    [message_id]      BIGINT     NULL,
    [time]            DATETIME   NOT NULL,
    [message]         CHAR (300) NOT NULL,
    [reference_count] TINYINT    NOT NULL,
    PRIMARY KEY NONCLUSTERED ([Slot] ASC)
)
WITH (MEMORY_OPTIMIZED = ON);


GO
PRINT N'Creating [dbo].[MyQLmaxNode0]...';


GO
CREATE TABLE [dbo].[MyQLmaxNode0] (
    [Slot]            BIGINT     NOT NULL,
    [message_id]      BIGINT     NULL,
    [time]            DATETIME   NOT NULL,
    [message]         CHAR (300) NOT NULL,
    [reference_count] TINYINT    NOT NULL
);


GO
PRINT N'Creating [dbo].[MyQLmaxNode0].[CIX_Node0]...';


GO
CREATE CLUSTERED INDEX [CIX_Node0]
    ON [dbo].[MyQLmaxNode0]([Slot] ASC);


GO
PRINT N'Creating [dbo].[MyQLmaxNode1]...';


GO
CREATE TABLE [dbo].[MyQLmaxNode1] (
    [Slot]            BIGINT     NOT NULL,
    [message_id]      BIGINT     NULL,
    [time]            DATETIME   NOT NULL,
    [message]         CHAR (300) NOT NULL,
    [reference_count] TINYINT    NOT NULL
);


GO
PRINT N'Creating [dbo].[MyQLmaxNode1].[CIX_Node1]...';


GO
CREATE CLUSTERED INDEX [CIX_Node1]
    ON [dbo].[MyQLmaxNode1]([Slot] ASC);


GO
PRINT N'Creating [dbo].[NonBlockingPopSequence]...';


GO
CREATE TABLE [dbo].[NonBlockingPopSequence] (
    [ID] BIGINT IDENTITY (1, 1) NOT NULL,
    PRIMARY KEY NONCLUSTERED HASH ([ID]) WITH (BUCKET_COUNT = 524288)
)
WITH (DURABILITY = SCHEMA_ONLY, MEMORY_OPTIMIZED = ON);


GO
PRINT N'Creating [dbo].[NonBlockingPopSequenceNode0]...';


GO
CREATE TABLE [dbo].[NonBlockingPopSequenceNode0] (
    [ID] BIGINT IDENTITY (1, 1) NOT NULL,
    PRIMARY KEY NONCLUSTERED HASH ([ID]) WITH (BUCKET_COUNT = 4194304)
)
WITH (DURABILITY = SCHEMA_ONLY, MEMORY_OPTIMIZED = ON);


GO
PRINT N'Creating [dbo].[NonBlockingPopSequenceNode1]...';


GO
CREATE TABLE [dbo].[NonBlockingPopSequenceNode1] (
    [ID] BIGINT IDENTITY (1, 1) NOT NULL,
    PRIMARY KEY NONCLUSTERED HASH ([ID]) WITH (BUCKET_COUNT = 4194304)
)
WITH (DURABILITY = SCHEMA_ONLY, MEMORY_OPTIMIZED = ON);


GO
PRINT N'Creating [dbo].[NonBlockingPushSequence]...';


GO
CREATE TABLE [dbo].[NonBlockingPushSequence] (
    [ID] BIGINT IDENTITY (1, 1) NOT NULL,
    PRIMARY KEY NONCLUSTERED HASH ([ID]) WITH (BUCKET_COUNT = 524288)
)
WITH (DURABILITY = SCHEMA_ONLY, MEMORY_OPTIMIZED = ON);


GO
PRINT N'Creating [dbo].[NonBlockingPushSequenceNode0]...';


GO
CREATE TABLE [dbo].[NonBlockingPushSequenceNode0] (
    [ID] BIGINT IDENTITY (1, 1) NOT NULL,
    PRIMARY KEY NONCLUSTERED HASH ([ID]) WITH (BUCKET_COUNT = 4194304)
)
WITH (DURABILITY = SCHEMA_ONLY, MEMORY_OPTIMIZED = ON);


GO
PRINT N'Creating [dbo].[NonBlockingPushSequenceNode1]...';


GO
CREATE TABLE [dbo].[NonBlockingPushSequenceNode1] (
    [ID] BIGINT IDENTITY (1, 1) NOT NULL,
    PRIMARY KEY NONCLUSTERED HASH ([ID]) WITH (BUCKET_COUNT = 4194304)
)
WITH (DURABILITY = SCHEMA_ONLY, MEMORY_OPTIMIZED = ON);


GO
PRINT N'Creating [dbo].[NonBlockingSequence]...';


GO
CREATE TABLE [dbo].[NonBlockingSequence] (
    [ID] BIGINT IDENTITY (1, 1) NOT NULL,
    PRIMARY KEY NONCLUSTERED HASH ([ID]) WITH (BUCKET_COUNT = 524288)
)
WITH (DURABILITY = SCHEMA_ONLY, MEMORY_OPTIMIZED = ON);


GO
PRINT N'Creating [dbo].[StresSQLStats]...';


GO
CREATE TABLE [dbo].[StresSQLStats] (
    [Test]                  VARCHAR (256)   NOT NULL,
    [Threads]               INT             NOT NULL,
    [StartTime]             DATETIME        NULL,
    [EndTime]               DATETIME        NULL,
    [TransactionRate]       BIGINT          NULL,
    [WaitType_1]            NVARCHAR (60)   NULL,
    [Wait_S_1]              DECIMAL (16, 2) NULL,
    [WaitCount_1]           BIGINT          NULL,
    [Percentage_1]          DECIMAL (5, 2)  NULL,
    [AvgWait_S_1]           DECIMAL (16, 4) NULL,
    [WaitType_2]            NVARCHAR (60)   NULL,
    [Wait_S_2]              DECIMAL (16, 2) NULL,
    [WaitCount_2]           BIGINT          NULL,
    [Percentage_2]          DECIMAL (5, 2)  NULL,
    [AvgWait_S_2]           DECIMAL (16, 4) NULL,
    [WaitType_3]            NVARCHAR (60)   NULL,
    [Wait_S_3]              DECIMAL (16, 2) NULL,
    [WaitCount_3]           BIGINT          NULL,
    [Percentage_3]          DECIMAL (5, 2)  NULL,
    [AvgWait_S_3]           DECIMAL (16, 4) NULL,
    [WaitType_4]            NVARCHAR (60)   NULL,
    [Wait_S_4]              DECIMAL (16, 2) NULL,
    [WaitCount_4]           BIGINT          NULL,
    [Percentage_4]          DECIMAL (5, 2)  NULL,
    [AvgWait_S_4]           DECIMAL (16, 4) NULL,
    [WaitType_5]            NVARCHAR (60)   NULL,
    [Wait_S_5]              DECIMAL (16, 2) NULL,
    [WaitCount_5]           BIGINT          NULL,
    [Percentage_5]          DECIMAL (5, 2)  NULL,
    [AvgWait_S_5]           DECIMAL (16, 4) NULL,
    [latch_class_1]         VARCHAR (60)    NULL,
    [wait_time_ms_1]        BIGINT          NULL,
    [latch_class_2]         VARCHAR (60)    NULL,
    [wait_time_ms_2]        BIGINT          NULL,
    [latch_class_3]         VARCHAR (60)    NULL,
    [wait_time_ms_3]        BIGINT          NULL,
    [latch_class_4]         VARCHAR (60)    NULL,
    [wait_time_ms_4]        BIGINT          NULL,
    [latch_class_5]         VARCHAR (60)    NULL,
    [wait_time_ms_5]        BIGINT          NULL,
    [spinlock_name_1]       VARCHAR (256)   NULL,
    [spins_1]               BIGINT          NULL,
    [collisions_1]          BIGINT          NULL,
    [backoffs_1]            BIGINT          NULL,
    [sleep_time_1]          BIGINT          NULL,
    [spins_per_collision_1] REAL            NULL,
    [spinlock_name_2]       VARCHAR (256)   NULL,
    [spins_2]               BIGINT          NULL,
    [collisions_2]          BIGINT          NULL,
    [backoffs_2]            BIGINT          NULL,
    [sleep_time_2]          BIGINT          NULL,
    [spins_per_collision_2] REAL            NULL,
    [spinlock_name_3]       VARCHAR (256)   NULL,
    [spins_3]               BIGINT          NULL,
    [collisions_3]          BIGINT          NULL,
    [backoffs_3]            BIGINT          NULL,
    [sleep_time_3]          BIGINT          NULL,
    [spins_per_collision_3] REAL            NULL,
    [spinlock_name_4]       VARCHAR (256)   NULL,
    [spins_4]               BIGINT          NULL,
    [collisions_4]          BIGINT          NULL,
    [backoffs_4]            BIGINT          NULL,
    [sleep_time_4]          BIGINT          NULL,
    [spins_per_collision_4] REAL            NULL,
    [spinlock_name_5]       VARCHAR (256)   NULL,
    [spins_5]               BIGINT          NULL,
    [collisions_5]          BIGINT          NULL,
    [backoffs_5]            BIGINT          NULL,
    [sleep_time_5]          BIGINT          NULL,
    [spins_per_collision_5] REAL            NULL,
    CONSTRAINT [PkInsertStats] PRIMARY KEY CLUSTERED ([Test] ASC, [Threads] ASC)
);


GO
PRINT N'Creating [dbo].[DF_BigTable_c2]...';


GO
ALTER TABLE [dbo].[MyBigTable]
    ADD CONSTRAINT [DF_BigTable_c2] DEFAULT (getdate()) FOR [c2];


GO
PRINT N'Creating [dbo].[DF_BigTable_c3]...';


GO
ALTER TABLE [dbo].[MyBigTable]
    ADD CONSTRAINT [DF_BigTable_c3] DEFAULT ('a') FOR [c3];


GO
PRINT N'Creating [dbo].[DF_BigTable_c4]...';


GO
ALTER TABLE [dbo].[MyBigTable]
    ADD CONSTRAINT [DF_BigTable_c4] DEFAULT ((1)) FOR [c4];


GO
PRINT N'Creating [dbo].[DF_BigTable_c5]...';


GO
ALTER TABLE [dbo].[MyBigTable]
    ADD CONSTRAINT [DF_BigTable_c5] DEFAULT ((2)) FOR [c5];


GO
PRINT N'Creating [dbo].[DF_BigTable_c6]...';


GO
ALTER TABLE [dbo].[MyBigTable]
    ADD CONSTRAINT [DF_BigTable_c6] DEFAULT ((42)) FOR [c6];


GO
PRINT N'Creating unnamed constraint on [dbo].[MyBigTableGuid]...';


GO
ALTER TABLE [dbo].[MyBigTableGuid]
    ADD DEFAULT (newid()) FOR [c1];


GO
PRINT N'Creating unnamed constraint on [dbo].[MyBigTableHash]...';


GO
ALTER TABLE [dbo].[MyBigTableHash]
    ADD DEFAULT (newid()) FOR [c1];


GO
PRINT N'Creating [dbo].[MessageSequence]...';


GO
CREATE SEQUENCE [dbo].[MessageSequence]
    AS INT
    INCREMENT BY 1;


GO
PRINT N'Creating [dbo].[PartIdSeq]...';


GO
CREATE SEQUENCE [dbo].[PartIdSeq]
    AS BIGINT
    START WITH 0
    INCREMENT BY 1;


GO
PRINT N'Creating [dbo].[PopSequence]...';


GO
CREATE SEQUENCE [dbo].[PopSequence]
    AS BIGINT
    INCREMENT BY 1
    MINVALUE 1
    MAXVALUE 2000000
    CYCLE
    CACHE 1000;


GO
PRINT N'Creating [dbo].[PopSequenceNode0]...';


GO
CREATE SEQUENCE [dbo].[PopSequenceNode0]
    AS BIGINT
    INCREMENT BY 1
    MINVALUE 1
    MAXVALUE 2000000
    CYCLE
    CACHE 1000;


GO
PRINT N'Creating [dbo].[PopSequenceNode1]...';


GO
CREATE SEQUENCE [dbo].[PopSequenceNode1]
    AS BIGINT
    INCREMENT BY 1
    MINVALUE 1
    MAXVALUE 2000000
    CYCLE
    CACHE 1000;


GO
PRINT N'Creating [dbo].[PushSequence]...';


GO
CREATE SEQUENCE [dbo].[PushSequence]
    AS BIGINT
    INCREMENT BY 1
    MINVALUE 1
    MAXVALUE 4000000
    CYCLE
    CACHE 1000;


GO
PRINT N'Creating [dbo].[PushSequenceNode0]...';


GO
CREATE SEQUENCE [dbo].[PushSequenceNode0]
    AS BIGINT
    INCREMENT BY 1
    MINVALUE 1
    MAXVALUE 2000000
    CYCLE
    CACHE 1000;


GO
PRINT N'Creating [dbo].[PushSequenceNode1]...';


GO
CREATE SEQUENCE [dbo].[PushSequenceNode1]
    AS BIGINT
    INCREMENT BY 1
    MINVALUE 1
    MAXVALUE 2000000
    CYCLE
    CACHE 1000;


GO
PRINT N'Creating [dbo].[BitReverse]...';


GO
CREATE FUNCTION [dbo].[BitReverse]
(@OriginalInt BIGINT NULL)
RETURNS BIGINT
AS
 EXTERNAL NAME [CLRUtils].[Utils.Utils].[BitReverse]


GO
PRINT N'Creating [dbo].[DistributeKey]...';


GO
CREATE FUNCTION [dbo].[DistributeKey] 
(
	-- Add the parameters for the function here
	@Slot bigint
)
RETURNS bigint
AS
BEGIN
	RETURN
		CASE RIGHT(@Slot, 1)
			WHEN 1 THEN   @Slot
			WHEN 2 THEN   ( @Slot 
			               + (  CAST(6  AS bigint) 
						      * CAST(1000000000 AS bigint) ) )
			WHEN 3 THEN   ( @Slot 
			               + (  CAST(2  AS bigint) 
						      * CAST(1000000000 AS bigint) ) )
			WHEN 4 THEN   ( @Slot 
			               + (  CAST(8  AS bigint) 
						      * CAST(1000000000 AS bigint) ) )
			WHEN 5 THEN   ( @Slot 
			               + (  CAST(3  AS bigint) 
						      * CAST(1000000000 AS bigint) ) )
			WHEN 6 THEN   ( @Slot 
			               + (  CAST(9  AS bigint) 
						      * CAST(1000000000 AS bigint) ) )
			WHEN 7 THEN   ( @Slot 
			               + (  CAST(4  AS bigint) 
						      * CAST(1000000000 AS bigint) ) )
			WHEN 8 THEN   ( @Slot 
			               + (  CAST(9  AS bigint) 
						      * CAST(1000000000 AS bigint) ) )
			WHEN 9 THEN   ( @Slot 
			               + (  CAST(5  AS bigint) 
						      * CAST(1000000000 AS bigint) ) )
			WHEN 0 THEN   ( @Slot 
			               + (  CAST(10 AS bigint) 
						      * CAST(1000000000 AS bigint) ) )
		END;
END
GO
PRINT N'Creating [dbo].[usp_GetPopSlotId]...';


GO

CREATE PROCEDURE [dbo].[usp_GetPopSlotId]  @Slot      bigint OUTPUT
                                         ,@QueueSize int = 4000000
WITH NATIVE_COMPILATION, SCHEMABINDING
AS
BEGIN ATOMIC
WITH ( TRANSACTION ISOLATION LEVEL = SNAPSHOT
      ,LANGUAGE                    = N'us_english')
    INSERT INTO dbo.NonBlockingPopSequence
        DEFAULT VALUES;

    SELECT @Slot = SCOPE_IDENTITY();

	DELETE FROM dbo.NonBlockingPopSequence WHERE ID = @Slot;

	SET @Slot = @Slot % @QueueSize;

	IF @Slot % 10 = 1
	BEGIN
		SET @Slot += 5000000000;
	END
	ELSE IF @Slot % 10 = 2
    BEGIN	
	    SET @Slot += 1000000000;
	END
	ELSE IF @Slot % 10 = 3
    BEGIN	
	    SET @Slot += 8000000000;
	END
	ELSE IF @Slot % 10 = 4
    BEGIN	
	    SET @Slot += 2000000000;
	END
	ELSE IF @Slot % 10 = 5
    BEGIN	
	    SET @Slot += 7000000000;
	END
	ELSE IF @Slot % 10 = 6
    BEGIN	
	    SET @Slot += 3000000000;
	END
	ELSE IF @Slot % 10 = 7
    BEGIN	
	    SET @Slot += 6000000000;
	END
	ELSE IF @Slot % 10 = 8
    BEGIN	
	    SET @Slot += 4000000000;
	END
	ELSE IF @Slot % 10 = 9
    BEGIN	
	    SET @Slot += 1000000000;
	END;
END;
GO
PRINT N'Creating [dbo].[usp_GetPopSlotIdNode0]...';


GO
CREATE PROCEDURE [dbo].[usp_GetPopSlotIdNode0]  @Slot      bigint OUTPUT
                                               ,@QueueSize int = 4000000
WITH NATIVE_COMPILATION, SCHEMABINDING
AS
BEGIN ATOMIC
WITH ( TRANSACTION ISOLATION LEVEL = SNAPSHOT
      ,LANGUAGE                    = N'us_english')
    INSERT INTO dbo.NonBlockingPopSequenceNode0
        DEFAULT VALUES;

    SELECT @Slot = SCOPE_IDENTITY();

	DELETE FROM dbo.NonBlockingPopSequenceNode0
	WHERE ID = @Slot;

	SET @Slot = @Slot % @QueueSize;

	IF @Slot % 10 = 1
	BEGIN
		SET @Slot += 5000000000;
	END
	ELSE IF @Slot % 10 = 2
    BEGIN	
	    SET @Slot += 1000000000;
	END
	ELSE IF @Slot % 10 = 3
    BEGIN	
	    SET @Slot += 8000000000;
	END
	ELSE IF @Slot % 10 = 4
    BEGIN	
	    SET @Slot += 2000000000;
	END
	ELSE IF @Slot % 10 = 5
    BEGIN	
	    SET @Slot += 7000000000;
	END
	ELSE IF @Slot % 10 = 6
    BEGIN	
	    SET @Slot += 3000000000;
	END
	ELSE IF @Slot % 10 = 7
    BEGIN	
	    SET @Slot += 6000000000;
	END
	ELSE IF @Slot % 10 = 8
    BEGIN	
	    SET @Slot += 4000000000;
	END
	ELSE IF @Slot % 10 = 9
    BEGIN	
	    SET @Slot += 1000000000;
	END;
END;
GO
PRINT N'Creating [dbo].[usp_GetPopSlotIdNode1]...';


GO
CREATE PROCEDURE [dbo].[usp_GetPopSlotIdNode1]  @Slot      bigint OUTPUT
                                               ,@QueueSize int = 4000000
WITH NATIVE_COMPILATION, SCHEMABINDING
AS
BEGIN ATOMIC
WITH ( TRANSACTION ISOLATION LEVEL = SNAPSHOT
      ,LANGUAGE                    = N'us_english')
    INSERT INTO dbo.NonBlockingPopSequenceNode1
        DEFAULT VALUES;

    SELECT @Slot = SCOPE_IDENTITY();

	DELETE FROM dbo.NonBlockingPopSequenceNode1
	WHERE ID = @Slot;

	SET @Slot = @Slot % @QueueSize;

	IF @Slot % 10 = 1
	BEGIN
		SET @Slot += 5000000000;
	END
	ELSE IF @Slot % 10 = 2
    BEGIN	
	    SET @Slot += 1000000000;
	END
	ELSE IF @Slot % 10 = 3
    BEGIN	
	    SET @Slot += 8000000000;
	END
	ELSE IF @Slot % 10 = 4
    BEGIN	
	    SET @Slot += 2000000000;
	END
	ELSE IF @Slot % 10 = 5
    BEGIN	
	    SET @Slot += 7000000000;
	END
	ELSE IF @Slot % 10 = 6
    BEGIN	
	    SET @Slot += 3000000000;
	END
	ELSE IF @Slot % 10 = 7
    BEGIN	
	    SET @Slot += 6000000000;
	END
	ELSE IF @Slot % 10 = 8
    BEGIN	
	    SET @Slot += 4000000000;
	END
	ELSE IF @Slot % 10 = 9
    BEGIN	
	    SET @Slot += 1000000000;
	END;
END;
GO
PRINT N'Creating [dbo].[usp_GetPushSlotId]...';


GO



CREATE PROCEDURE [dbo].[usp_GetPushSlotId]  @Slot      bigint OUTPUT
                                          ,@QueueSize int = 4000000
WITH NATIVE_COMPILATION, SCHEMABINDING
AS
BEGIN ATOMIC
WITH ( TRANSACTION ISOLATION LEVEL = SNAPSHOT
      ,LANGUAGE                    = N'us_english')
    INSERT INTO dbo.NonBlockingPushSequence
        DEFAULT VALUES;

    SELECT @Slot = SCOPE_IDENTITY();

    DELETE FROM dbo.NonBlockingPushSequence
	WHERE ID = @Slot;

	SET @Slot = @Slot % @QueueSize;

	IF @Slot % 10 = 1
	BEGIN
		SET @Slot += 5000000000;
	END
	ELSE IF @Slot % 10 = 2
    BEGIN	
	    SET @Slot += 1000000000;
	END
	ELSE IF @Slot % 10 = 3
    BEGIN	
	    SET @Slot += 8000000000;
	END
	ELSE IF @Slot % 10 = 4
    BEGIN	
	    SET @Slot += 2000000000;
	END
	ELSE IF @Slot % 10 = 5
    BEGIN	
	    SET @Slot += 7000000000;
	END
	ELSE IF @Slot % 10 = 6
    BEGIN	
	    SET @Slot += 3000000000;
	END
	ELSE IF @Slot % 10 = 7
    BEGIN	
	    SET @Slot += 6000000000;
	END
	ELSE IF @Slot % 10 = 8
    BEGIN	
	    SET @Slot += 4000000000;
	END
	ELSE IF @Slot % 10 = 9
    BEGIN	
	    SET @Slot += 1000000000;
	END;
END;
GO
PRINT N'Creating [dbo].[usp_GetPushSlotIdNode0]...';


GO
CREATE PROCEDURE [dbo].[usp_GetPushSlotIdNode0]  @Slot      bigint OUTPUT
                                               ,@QueueSize int = 4000000
WITH NATIVE_COMPILATION, SCHEMABINDING
AS
BEGIN ATOMIC
WITH ( TRANSACTION ISOLATION LEVEL = SNAPSHOT
      ,LANGUAGE                    = N'us_english')
    INSERT INTO dbo.NonBlockingPushSequenceNode0
        DEFAULT VALUES;

    SELECT @Slot = SCOPE_IDENTITY();

	DELETE FROM dbo.NonBlockingPushSequenceNode0
	WHERE ID = @Slot;

	SET @Slot = @Slot % @QueueSize;

	IF @Slot % 10 = 1
	BEGIN
		SET @Slot += 5000000000;
	END
	ELSE IF @Slot % 10 = 2
    BEGIN	
	    SET @Slot += 1000000000;
	END
	ELSE IF @Slot % 10 = 3
    BEGIN	
	    SET @Slot += 8000000000;
	END
	ELSE IF @Slot % 10 = 4
    BEGIN	
	    SET @Slot += 2000000000;
	END
	ELSE IF @Slot % 10 = 5
    BEGIN	
	    SET @Slot += 7000000000;
	END
	ELSE IF @Slot % 10 = 6
    BEGIN	
	    SET @Slot += 3000000000;
	END
	ELSE IF @Slot % 10 = 7
    BEGIN	
	    SET @Slot += 6000000000;
	END
	ELSE IF @Slot % 10 = 8
    BEGIN	
	    SET @Slot += 4000000000;
	END
	ELSE IF @Slot % 10 = 9
    BEGIN	
	    SET @Slot += 1000000000;
	END;
END;
GO
PRINT N'Creating [dbo].[usp_GetPushSlotIdNode1]...';


GO


CREATE PROCEDURE [dbo].[usp_GetPushSlotIdNode1]  @Slot      bigint OUTPUT
                                                ,@QueueSize int = 4000000
WITH NATIVE_COMPILATION, SCHEMABINDING
AS
BEGIN ATOMIC
WITH ( TRANSACTION ISOLATION LEVEL = SNAPSHOT
      ,LANGUAGE                    = N'us_english')
    INSERT INTO dbo.NonBlockingPushSequenceNode1
        DEFAULT VALUES;

    SELECT @Slot = SCOPE_IDENTITY();

	DELETE FROM dbo.NonBlockingPushSequenceNode1
	WHERE ID = @Slot;

	SET @Slot = @Slot % @QueueSize;

	IF @Slot % 10 = 1
	BEGIN
		SET @Slot += 5000000000;
	END
	ELSE IF @Slot % 10 = 2
    BEGIN	
	    SET @Slot += 1000000000;
	END
	ELSE IF @Slot % 10 = 3
    BEGIN	
	    SET @Slot += 8000000000;
	END
	ELSE IF @Slot % 10 = 4
    BEGIN	
	    SET @Slot += 2000000000;
	END
	ELSE IF @Slot % 10 = 5
    BEGIN	
	    SET @Slot += 7000000000;
	END
	ELSE IF @Slot % 10 = 6
    BEGIN	
	    SET @Slot += 3000000000;
	END
	ELSE IF @Slot % 10 = 7
    BEGIN	
	    SET @Slot += 6000000000;
	END
	ELSE IF @Slot % 10 = 8
    BEGIN	
	    SET @Slot += 4000000000;
	END
	ELSE IF @Slot % 10 = 9
    BEGIN	
	    SET @Slot += 1000000000;
	END;
END;
GO
PRINT N'Creating [dbo].[usp_InsertBitReverse]...';


GO

CREATE PROCEDURE [dbo].[usp_InsertBitReverse]
     @TransactionsPerThread int = 500000
    ,@CommitBatchSize       int = 2
 AS
BEGIN
    SET XACT_ABORT ON;
    SET NOCOUNT ON;
 
    DECLARE   @i      INTEGER = 0
	         ,@j      INTEGER = 0
             ,@base   BIGINT  = @@SPID * @TransactionsPerThread
			 ,@PartId INTEGER;
 
    WHILE @i < @TransactionsPerThread
    BEGIN
        BEGIN TRANSACTION
		    WHILE @j < @CommitBatchSize
			BEGIN		 
				INSERT INTO dbo.MyBigTable (c1)
				VALUES  (dbo.BitReverse(@base + @i)); 
				SET @j += 1;
			END;
        COMMIT;

		set @j = 0;
        SET @i += 1;
    END;
END;
GO
PRINT N'Creating [dbo].[usp_InsertGuid]...';


GO


CREATE PROCEDURE [dbo].[usp_InsertGuid]
     @TransactionsPerThread int = 250000
    ,@CommitBatchSize       int = 2
 AS
BEGIN
    SET XACT_ABORT ON;
    SET NOCOUNT ON;
 
    DECLARE  @i INTEGER = 0
	        ,@j INTEGER = 0;
 
    WHILE @i < @TransactionsPerThread
    BEGIN
        BEGIN TRANSACTION
			WHILE @j < @CommitBatchSize
			BEGIN
				INSERT INTO dbo.MyBigTableGuid DEFAULT VALUES;
				SET @j += 1;
			END;
        COMMIT;
		
		SET @j = 0;
        SET @i += 1;
    END;
END;
GO
PRINT N'Creating [dbo].[usp_InsertHashPart]...';


GO



CREATE PROCEDURE [dbo].[usp_InsertHashPart]
     @TransactionsPerThread int = 500000
    ,@CommitBatchSize       int = 2
AS
BEGIN
    SET XACT_ABORT ON;
    SET NOCOUNT ON;
 
    DECLARE  @i           INTEGER = 0
	        ,@j           INTEGER = 0 
	        ,@PartitionId BIGINT;
 
    WHILE @i < @TransactionsPerThread
    BEGIN
	    SET @PartitionId = ( ( CAST(RAND() * 1000000 AS bigint ) ) % 40 ) + 1;

        BEGIN TRANSACTION
		    WHILE @j < @CommitBatchSize
			BEGIN
				INSERT INTO dbo.MyBigTableHash( PartId ) VALUES ( @PartitionId );
				SET @j += 1;
			END
		COMMIT;

		SET @j = 0;
        SET @i += 1;
    END;
END;
GO
PRINT N'Creating [dbo].[usp_InsertSpid]...';


GO

CREATE PROCEDURE [dbo].[usp_InsertSpid]
     @TransactionsPerThread int = 500000
    ,@CommitBatchSize       int = 2
AS
BEGIN
    SET XACT_ABORT ON;
    SET NOCOUNT ON;
 
    DECLARE   @i      INTEGER = 0
	         ,@j      INTEGER = 0
             ,@base   BIGINT  = @@SPID * 10000000000;
 
    WHILE @i < @TransactionsPerThread
    BEGIN
        BEGIN TRANSACTION
		    WHILE @j < @CommitBatchSize
			BEGIN
				INSERT INTO dbo.MyBigTable (c1)
				VALUES  (@base + @i); 
				SET @j += 1;
			END;
        COMMIT;

		SET @j = 0;
        SET @i += 1;
    END;
END;
GO
PRINT N'Creating [dbo].[usp_LMaxDiskInit]...';


GO

CREATE PROCEDURE [dbo].[usp_LMaxDiskInit] 
AS
BEGIN
		UPDATE [dbo].[MyQLmax] SET reference_count = 0;
END;
GO
PRINT N'Creating [dbo].[usp_LMaxDiskNumaInit]...';


GO

CREATE PROCEDURE [dbo].[usp_LMaxDiskNumaInit] 
AS
BEGIN
		UPDATE [dbo].[MyQLmaxNode0] SET reference_count = 0;
		UPDATE [dbo].[MyQLmaxNode1] SET reference_count = 0;
END;
GO
PRINT N'Creating [dbo].[usp_LMaxDiskQSlotInit]...';


GO

CREATE PROCEDURE [dbo].[usp_LMaxDiskQSlotInit]  
AS
BEGIN 
    DECLARE  @QueueSize int = 4000000
	        ,@Slot      bigint
	        ,@i         int = 0;

	SET NOCOUNT ON;

	TRUNCATE TABLE [dbo].[MyQLmax];
	TRUNCATE TABLE [dbo].[MyQLmaxNode0];
	TRUNCATE TABLE [dbo].[MyQLmaxNode1];

	WHILE @i < @QueueSize
	BEGIN
		SET @Slot = (CASE RIGHT(@i, 1)
						 WHEN 1
							 THEN @i + 5000000000
						 WHEN 2
							 THEN @i + 1000000000
						 WHEN 3
							 THEN @i + 8000000000
						 WHEN 4
							 THEN @i + 2000000000
						 WHEN 5
							 THEN @i + 7000000000
						 WHEN 6
							 THEN @i + 3000000000
						 WHEN 7
							 THEN @i + 6000000000
						 WHEN 8
							 THEN @i + 4000000000
						 WHEN 9
							 THEN @i + 9000000000
						 ELSE
							 @i
					 END );			

		INSERT INTO [dbo].[MyQLmax]
			   ([Slot]
			   ,[message_id]
			   ,[time]
			   ,[message]
			   ,[reference_count])
		 VALUES
			   (@Slot
			   ,0
			   ,GETDATE()
			   ,''
			   ,0);
		SET @i += 1;
	END;

	INSERT INTO [dbo].[MyQLmaxNode0]
			([Slot]
			,[message_id]
			,[time]
			,[message]
			,[reference_count])
	SELECT   [Slot]
			,[message_id]
			,[time]
			,[message]
			,[reference_count]
	FROM     [dbo].[MyQLmax];

	INSERT INTO [dbo].[MyQLmaxNode1]
			([Slot]
			,[message_id]
			,[time]
			,[message]
			,[reference_count])
	SELECT   [Slot]
			,[message_id]
			,[time]
			,[message]
			,[reference_count]
	FROM     [dbo].[MyQLmax];
END;
GO
PRINT N'Creating [dbo].[usp_LMaxImOltpInit]...';


GO

CREATE PROCEDURE [dbo].[usp_LMaxImOltpInit] 
WITH NATIVE_COMPILATION, SCHEMABINDING
AS
BEGIN ATOMIC
WITH ( TRANSACTION ISOLATION LEVEL = SNAPSHOT
      ,LANGUAGE                    = N'us_english')
		UPDATE [dbo].[MyQLmaxImOltp] SET reference_count = 0;
END;
GO
PRINT N'Creating [dbo].[usp_LMaxImOltpQSlotInit]...';


GO
CREATE PROCEDURE [dbo].[usp_LMaxImOltpQSlotInit]  
WITH NATIVE_COMPILATION, SCHEMABINDING
AS
BEGIN ATOMIC
    WITH ( TRANSACTION ISOLATION LEVEL = SNAPSHOT
          ,LANGUAGE                    = N'us_english')

    DECLARE  @QueueSize int = 4000000
	        ,@i         int = 0;

	WHILE @i < @QueueSize
	BEGIN
		INSERT INTO [dbo].[MyQLmaxImOltp]
			   ([message_id]
			   ,[time]
			   ,[message]
			   ,[reference_count])
		 VALUES
			   (0
			   ,GETDATE()
			   ,''
			   ,0);
		SET @i += 1;
	END;
END;
GO
PRINT N'Creating [dbo].[usp_PopMessageDiskNoSequence]...';


GO

CREATE PROCEDURE [dbo].[usp_PopMessageDiskNoSequence] @MessagePopped int OUTPUT
AS
BEGIN 
    DECLARE  @QueueSize int    = 4000000
	        ,@Message   char(300)
	        ,@Slot      bigint;

	SET @MessagePopped = 0;

	WHILE @MessagePopped = 0
	BEGIN
		EXEC [dbo].[usp_GetPopSlotId] @Slot OUTPUT, @QueueSize;

		UPDATE  q               WITH (ROWLOCK)
		SET     time            = GETDATE()
			   ,@Message        = message
			   ,reference_count = reference_count - 1
		FROM    [dbo].[MyQLmax] AS q 
		WHERE   Slot            = @Slot
		AND     reference_count = 1
		OPTION (MAXDOP 1);

		SET    @MessagePopped   = @@ROWCOUNT;
	END;
END;
GO
PRINT N'Creating [dbo].[usp_PopMessageDiskNoSequenceNode0]...';


GO
CREATE PROCEDURE [dbo].[usp_PopMessageDiskNoSequenceNode0]  @MessagePopped int OUTPUT
                                                           ,@QueueSize     int = 4000000
AS
BEGIN 
    DECLARE  @Message  char(300)
	        ,@Slot     bigint;

    SET NOCOUNT ON;

    SET @MessagePopped = 0;

	WHILE @MessagePopped = 0
	BEGIN
	    EXEC [dbo].[usp_GetPopSlotIdNode0] @Slot;

		UPDATE [dbo].[MyQLmaxNode0] WITH (ROWLOCK)
		SET     time            = GETDATE()
			   ,@Message        = [message]
			   ,message_id      = @Slot
			   ,reference_count = reference_count - 1
		WHERE   Slot            = @Slot
		AND     reference_count = 1
		OPTION  (MAXDOP 1);

		SET    @MessagePopped = @@ROWCOUNT;
	END
END;
GO
PRINT N'Creating [dbo].[usp_PopMessageDiskNoSequenceNode1]...';


GO
CREATE PROCEDURE [dbo].[usp_PopMessageDiskNoSequenceNode1]  @MessagePopped int OUTPUT
                                                           ,@QueueSize     int = 4000000
AS
BEGIN 
    DECLARE  @Message  char(300)
	        ,@Slot     bigint;

    SET NOCOUNT ON;

    SET @MessagePopped = 0;

	WHILE @MessagePopped = 0
	BEGIN
	    EXEC [dbo].[usp_GetPopSlotIdNode1] @Slot;

		UPDATE [dbo].[MyQLmaxNode1] WITH (ROWLOCK)
		SET     time            = GETDATE()
			   ,@Message        = [message]
			   ,message_id      = @Slot
			   ,reference_count = reference_count - 1
		WHERE   Slot            = @Slot
		AND     reference_count = 1
		OPTION  (MAXDOP 1);

		SET    @MessagePopped = @@ROWCOUNT;
	END
END;
GO
PRINT N'Creating [dbo].[usp_PopMessageDiskSequence]...';


GO
CREATE PROCEDURE [dbo].[usp_PopMessageDiskSequence]  @MessagePopped int OUTPUT
                                                    ,@QueueSize     int = 4000000
AS
BEGIN 
    DECLARE  @Message  char(300)
	        ,@Slot     bigint;

    SET NOCOUNT ON;

    SET @MessagePopped = 0;

	WHILE @MessagePopped = 0
	BEGIN
		SELECT @Slot = NEXT VALUE FOR [dbo].[PopSequence] % @QueueSize

		SET @Slot = (CASE RIGHT(@Slot, 1)
						 WHEN 1
							 THEN @Slot + 5000000000
						 WHEN 2
							 THEN @Slot + 1000000000
						 WHEN 3
							 THEN @Slot + 8000000000
						 WHEN 4
							 THEN @Slot + 2000000000
						 WHEN 5
							 THEN @Slot + 7000000000
						 WHEN 6
							 THEN @Slot + 3000000000
						 WHEN 7
							 THEN @Slot + 6000000000
						 WHEN 8
							 THEN @Slot + 4000000000
						 WHEN 9
							 THEN @Slot + 9000000000
						 ELSE
							 @Slot
					 END );					   

		UPDATE  [dbo].[MyQLmax] WITH (ROWLOCK)
		SET      time            = GETDATE()
			    ,@Message        = [message]
			    ,message_id      = @Slot
			    ,reference_count = reference_count - 1
		WHERE   Slot            = @Slot
		AND     reference_count = 1
		OPTION  (MAXDOP 1);

		SET @MessagePopped = @@ROWCOUNT;
	END
END;
GO
PRINT N'Creating [dbo].[usp_PopMessageDiskSequenceNode0]...';


GO
CREATE PROCEDURE [dbo].[usp_PopMessageDiskSequenceNode0]  @MessagePopped int OUTPUT
                                                         ,@QueueSize     int = 4000000
AS
BEGIN 
    DECLARE  @Message  char(300)
	        ,@Slot     bigint;

    SET NOCOUNT ON;

    SET @MessagePopped = 0;

	WHILE @MessagePopped = 0
	BEGIN
		SELECT @Slot = NEXT VALUE FOR [dbo].[PopSequenceNode0] % @QueueSize

		SET @Slot = (CASE RIGHT(@Slot, 1)
						 WHEN 1
							 THEN @Slot + 5000000000
						 WHEN 2
							 THEN @Slot + 1000000000
						 WHEN 3
							 THEN @Slot + 8000000000
						 WHEN 4
							 THEN @Slot + 2000000000
						 WHEN 5
							 THEN @Slot + 7000000000
						 WHEN 6
							 THEN @Slot + 3000000000
						 WHEN 7
							 THEN @Slot + 6000000000
						 WHEN 8
							 THEN @Slot + 4000000000
						 WHEN 9
							 THEN @Slot + 9000000000
						 ELSE
							 @Slot
					 END );					   

		UPDATE [dbo].[MyQLmaxNode0] WITH (ROWLOCK)
		SET     time            = GETDATE()
			   ,@Message        = [message]
			   ,message_id      = @Slot
			   ,reference_count = reference_count - 1
		WHERE   Slot            = @Slot
		AND     reference_count = 1
		OPTION  (MAXDOP 1);

		SET    @MessagePopped = @@ROWCOUNT;
	END
END;
GO
PRINT N'Creating [dbo].[usp_PopMessageDiskSequenceNode1]...';


GO
CREATE PROCEDURE [dbo].[usp_PopMessageDiskSequenceNode1]  @MessagePopped int OUTPUT
                                                         ,@QueueSize     int = 4000000
AS
BEGIN 
    DECLARE  @Message char(300)
	        ,@Slot    bigint;

    SET NOCOUNT ON;

    SET @MessagePopped = 0;

	WHILE @MessagePopped = 0
	BEGIN
		SELECT @Slot = NEXT VALUE FOR [dbo].[PopSequenceNode1] % @QueueSize

		SET @Slot = (CASE RIGHT(@Slot, 1)
						 WHEN 1
							 THEN @Slot + 5000000000
						 WHEN 2
							 THEN @Slot + 1000000000
						 WHEN 3
							 THEN @Slot + 8000000000
						 WHEN 4
							 THEN @Slot + 2000000000
						 WHEN 5
							 THEN @Slot + 7000000000
						 WHEN 6
							 THEN @Slot + 3000000000
						 WHEN 7
							 THEN @Slot + 6000000000
						 WHEN 8
							 THEN @Slot + 4000000000
						 WHEN 9
							 THEN @Slot + 9000000000
						 ELSE
							 @Slot
					 END );					   

		UPDATE [dbo].[MyQLmaxNode1] WITH (ROWLOCK)
		SET     time            = GETDATE()
			   ,@Message        = [message]
			   ,message_id      = @Slot
			   ,reference_count = reference_count - 1
		WHERE   Slot            = @Slot
		AND     reference_count = 1
		OPTION  (MAXDOP 1);

		SET    @MessagePopped = @@ROWCOUNT;
	END
END;
GO
PRINT N'Creating [dbo].[usp_PopMessageImOltpNoSequence]...';


GO
CREATE PROCEDURE [dbo].[usp_PopMessageImOltpNoSequence]  
WITH NATIVE_COMPILATION, SCHEMABINDING
AS
BEGIN ATOMIC
    WITH ( TRANSACTION ISOLATION LEVEL = SNAPSHOT
          ,LANGUAGE                    = N'us_english')

    DECLARE  @MessagePopped int
	        ,@QueueSize     int = 200000
			,@Slot          bigint;

	SET @MessagePopped = 0;

	WHILE @MessagePopped = 0
	BEGIN
		INSERT INTO [dbo].[NonBlockingPopSequence]
			DEFAULT VALUES;

		SELECT @Slot = SCOPE_IDENTITY();
	
		DELETE FROM [dbo].[NonBlockingPopSequence] WHERE ID = @Slot;
		
		UPDATE [dbo].[MyQLmaxImOltp]
		SET     time            = GETDATE()
			   ,message         = 'Hello world'
			   ,message_id      = @Slot
			   ,reference_count = reference_count - 1
		WHERE   Slot            = @Slot % @QueueSize
		AND     reference_count = 1;

		SET @MessagePopped = @@ROWCOUNT;
	END;
END;
GO
PRINT N'Creating [dbo].[usp_PushMessageDiskNoSequence]...';


GO
CREATE PROCEDURE [dbo].[usp_PushMessageDiskNoSequence]  @MessagePushed int OUTPUT
                                                       ,@QueueSize     int = 4000000
AS
BEGIN 
    DECLARE  @Message  char(300)
	        ,@Slot     bigint;

    SET NOCOUNT ON;

    SET @MessagePushed = 0;

	WHILE @MessagePushed = 0
	BEGIN
	    EXEC dbo.usp_GetPushSlotId @Slot OUTPUT;

		UPDATE  [dbo].[MyQLmax] WITH (ROWLOCK)
		SET      time            = GETDATE()
			    ,@Message        = [message]
			    ,message_id      = @Slot
			    ,reference_count = reference_count + 1
		WHERE   Slot            = @Slot
		AND     reference_count = 0
		OPTION  (MAXDOP 1);

		SET @MessagePushed = @@ROWCOUNT;
	END
END;
GO
PRINT N'Creating [dbo].[usp_PushMessageDiskNoSequenceNode0]...';


GO

CREATE PROCEDURE [dbo].[usp_PushMessageDiskNoSequenceNode0]  @MessagePushed int OUTPUT
                                                            ,@QueueSize     int = 4000000
AS
BEGIN 
    DECLARE @Slot bigint;

    SET NOCOUNT ON;

    SET @MessagePushed = 0;

	WHILE @MessagePushed = 0
	BEGIN
		EXEC usp_GetPushSlotIdNode0 @Slot;

		UPDATE [dbo].[MyQLmaxNode0]	WITH (ROWLOCK)
		SET     time            = GETDATE()
			   ,message         = 'Hello world'
			   ,message_id      = @Slot
			   ,reference_count = reference_count + 1
		WHERE   Slot            = @Slot
		AND     reference_count = 0
		OPTION  (MAXDOP 1);

		SET    @MessagePushed = @@ROWCOUNT;
	END
END;
GO
PRINT N'Creating [dbo].[usp_PushMessageDiskNoSequenceNode1]...';


GO

CREATE PROCEDURE [dbo].[usp_PushMessageDiskNoSequenceNode1]  @MessagePushed int OUTPUT
                                                            ,@QueueSize     int = 4000000
AS
BEGIN 
    DECLARE @Slot bigint;

    SET NOCOUNT ON;

    SET @MessagePushed = 0;

	WHILE @MessagePushed = 0
	BEGIN
		EXEC usp_GetPushSlotIdNode1 @Slot;

		UPDATE [dbo].[MyQLmaxNode1]	WITH (ROWLOCK)
		SET     time            = GETDATE()
			   ,message         = 'Hello world'
			   ,message_id      = @Slot
			   ,reference_count = reference_count + 1
		WHERE   Slot            = @Slot
		AND     reference_count = 0
		OPTION  (MAXDOP 1);

		SET    @MessagePushed = @@ROWCOUNT;
	END
END;
GO
PRINT N'Creating [dbo].[usp_PushMessageDiskSequence]...';


GO
CREATE PROCEDURE [dbo].[usp_PushMessageDiskSequence]  @MessagePushed int OUTPUT
                                                     ,@QueueSize     int = 4000000
AS
BEGIN 
    DECLARE  @Message  char(300)
	        ,@Slot     bigint;

    SET NOCOUNT ON;

    SET @MessagePushed = 0;

	WHILE @MessagePushed = 0
	BEGIN
		SELECT @Slot = NEXT VALUE FOR [dbo].[PushSequence] % @QueueSize

		SET @Slot = (CASE RIGHT(@Slot, 1)
						 WHEN 1
							 THEN @Slot + 5000000000
						 WHEN 2
							 THEN @Slot + 1000000000
						 WHEN 3
							 THEN @Slot + 8000000000
						 WHEN 4
							 THEN @Slot + 2000000000
						 WHEN 5
							 THEN @Slot + 7000000000
						 WHEN 6
							 THEN @Slot + 3000000000
						 WHEN 7
							 THEN @Slot + 6000000000
						 WHEN 8
							 THEN @Slot + 4000000000
						 WHEN 9
							 THEN @Slot + 9000000000
						 ELSE
							 @Slot
					 END );					   

		UPDATE  [dbo].[MyQLmax] WITH (ROWLOCK)
		SET      time            = GETDATE()
			    ,@Message        = [message]
			    ,message_id      = @Slot
			    ,reference_count = reference_count + 1
		WHERE   Slot            = @Slot
		AND     reference_count = 0
		OPTION  (MAXDOP 1);

		SET @MessagePushed = @@ROWCOUNT;
	END
END;
GO
PRINT N'Creating [dbo].[usp_PushMessageDiskSequenceNode0]...';


GO
CREATE PROCEDURE [dbo].[usp_PushMessageDiskSequenceNode0]  @MessagePushed int OUTPUT
                                                          ,@QueueSize     int = 4000000
AS
BEGIN 
    DECLARE @Slot bigint;

    SET NOCOUNT ON;

    SET @MessagePushed = 0;

	WHILE @MessagePushed = 0
	BEGIN
		SELECT @Slot = NEXT VALUE FOR [dbo].[PushSequenceNode0] % @QueueSize

		SET @Slot = (CASE RIGHT(@Slot, 1)
						 WHEN 1
							 THEN @Slot + 5000000000
						 WHEN 2
							 THEN @Slot + 1000000000
						 WHEN 3
							 THEN @Slot + 8000000000
						 WHEN 4
							 THEN @Slot + 2000000000
						 WHEN 5
							 THEN @Slot + 7000000000
						 WHEN 6
							 THEN @Slot + 3000000000
						 WHEN 7
							 THEN @Slot + 6000000000
						 WHEN 8
							 THEN @Slot + 4000000000
						 WHEN 9
							 THEN @Slot + 9000000000
						 ELSE
							 @Slot
					 END );					   

		UPDATE [dbo].[MyQLmaxNode0]	WITH (ROWLOCK)
		SET     time            = GETDATE()
			   ,message         = 'Hello world'
			   ,message_id      = @Slot
			   ,reference_count = reference_count + 1
		WHERE   Slot            = @Slot
		AND     reference_count = 0
		OPTION  (MAXDOP 1);

		SET    @MessagePushed = @@ROWCOUNT;
	END
END;
GO
PRINT N'Creating [dbo].[usp_PushMessageDiskSequenceNode1]...';


GO
CREATE PROCEDURE [dbo].[usp_PushMessageDiskSequenceNode1]  @MessagePushed int OUTPUT
                                                          ,@QueueSize     int = 4000000
AS
BEGIN 
    DECLARE @Slot bigint;

    SET NOCOUNT ON;

    SET @MessagePushed = 0;

	WHILE @MessagePushed = 0
	BEGIN
		SELECT @Slot = NEXT VALUE FOR [dbo].[PushSequenceNode1] % @QueueSize

		SET @Slot = (CASE RIGHT(@Slot, 1)
						 WHEN 1
							 THEN @Slot + 5000000000
						 WHEN 2
							 THEN @Slot + 1000000000
						 WHEN 3
							 THEN @Slot + 8000000000
						 WHEN 4
							 THEN @Slot + 2000000000
						 WHEN 5
							 THEN @Slot + 7000000000
						 WHEN 6
							 THEN @Slot + 3000000000
						 WHEN 7
							 THEN @Slot + 6000000000
						 WHEN 8
							 THEN @Slot + 4000000000
						 WHEN 9
							 THEN @Slot + 9000000000
						 ELSE
							 @Slot
					 END );					   

		UPDATE [dbo].[MyQLmaxNode1] WITH (ROWLOCK)
		SET     time            = GETDATE()
			   ,message         = 'Hello world'
			   ,message_id      = @Slot
			   ,reference_count = reference_count + 1
		WHERE   Slot            = @Slot
		AND     reference_count = 0
		OPTION  (MAXDOP 1);

		SET    @MessagePushed = @@ROWCOUNT;
	END
END;
GO
PRINT N'Creating [dbo].[usp_PushMessageImOltpNoSequence]...';


GO
CREATE PROCEDURE [dbo].[usp_PushMessageImOltpNoSequence]  
WITH NATIVE_COMPILATION, SCHEMABINDING
AS
BEGIN ATOMIC
    WITH ( TRANSACTION ISOLATION LEVEL = SNAPSHOT
          ,LANGUAGE                    = N'us_english')

    DECLARE  @MessagePushed int
	        ,@QueueSize     int = 200000
			,@Slot          bigint;

	SET @MessagePushed = 0;

	WHILE @MessagePushed = 0
	BEGIN
		INSERT INTO [dbo].[NonBlockingPushSequence]
			DEFAULT VALUES;

		SELECT @Slot = SCOPE_IDENTITY();
	
		DELETE FROM [dbo].[NonBlockingPushSequence] WHERE ID = @Slot;
		
		UPDATE [dbo].[MyQLmaxImOltp]
		SET     time            = GETDATE()
			   ,message         = 'Hello world'
			   ,message_id      = @Slot
			   ,reference_count = reference_count + 1
		WHERE   Slot            = @Slot % @QueueSize
		AND     reference_count = 0;

		SET @MessagePushed = @@ROWCOUNT;
	END;
END;
GO
PRINT N'Creating [dbo].[usp_PushMessageImOltpSequence]...';


GO


CREATE PROCEDURE [dbo].[usp_PushMessageImOltpSequence] @Slot int, @MessagePushed int OUTPUT
WITH NATIVE_COMPILATION, SCHEMABINDING
AS
BEGIN ATOMIC
WITH ( TRANSACTION ISOLATION LEVEL = SNAPSHOT
      ,LANGUAGE                    = N'us_english')

    UPDATE [dbo].[MyQLmaxImOltp]
	SET     [message]         = 'Hello world'
	       ,[reference_count] = 1
	WHERE  Slot               = @Slot
	AND    reference_count    = 0;

	SET @MessagePushed = @@ROWCOUNT;
END;
GO
PRINT N'Creating [dbo].[usp_StresSQL]...';


GO
CREATE PROCEDURE [dbo].[usp_StresSQL] 
     @Test                  VARCHAR(256)
	,@StartThread           INT            = 1
	,@EndThread             INT            = 20
    ,@Procedure1            VARCHAR(256)   = 'LmaxPushV3Wrapper'
    ,@Procedure2            VARCHAR(256)   = 'NO POP PROCEDURE'
	,@InitProcedure         NVARCHAR(256)  = N'NO INIT PROCEDURE'
	,@TransactionsPerThread BIGINT         = 200000
	,@CommitBatchSize       INT            = 1
AS
BEGIN
    DECLARE  @DatabaseName VARCHAR(256)   = ''
            ,@AlterDbCmd   NVARCHAR(128)            
			,@StartTime    DATETIME
	        ,@Server       VARCHAR(256)       
            ,@InitCmd      NVARCHAR(512)
            ,@PshCmd       VARCHAR(512)
			,@i            BIGINT;

    DECLARE @WaitStats TABLE (
	     [Rank]       [bigint]         NULL
		,[WaitType]   [nvarchar](60)   NULL
		,[Wait_S]     [decimal](16, 2) NULL
		,[WaitCount]  [bigint]         NULL
		,[Percentage] [decimal](5, 2)  NULL
		,[AvgWait_S]  [decimal](16, 4) NULL
	);

	DECLARE @SpinlockStats TABLE (
         [Rank]                [tinyint]      NULL
		,[name]                [varchar](256) NULL
		,[collisions]          [bigint]       NULL
		,[spins]               [bigint]       NULL
		,[spins_per_collision] [real]         NULL
		,[sleep_time]          [bigint]       NULL
		,[backoffs]            [bigint]       NULL
	);

	SET NOCOUNT ON;

	SET @i = @StartThread;

	SELECT @DatabaseName = DB_NAME();
	SELECT @Server       = @@SERVERNAME;

	WHILE @i <= @EndThread
	BEGIN	
	    IF NOT EXISTS (SELECT 1
		               FROM   StresSQLStats
					   WHERE  Test    = @Test
					   AND    Threads = @i)
		BEGIN
			IF @InitProcedure <> 'NO INIT PROCEDURE'
			BEGIN
				SET @InitCmd = 'EXECUTE ' + @InitProcedure;
				EXECUTE sp_executesql @InitCmd;
			END;

			SET @AlterDbCmd = 'ALTER DATABASE ' + @DatabaseName + ' SET RECOVERY SIMPLE';
			EXECUTE sp_executesql @AlterDbCmd;
			SET @AlterDbCmd = 'ALTER DATABASE ' + @DatabaseName + ' SET RECOVERY FULL';
			EXECUTE sp_executesql @AlterDbCmd;

			INSERT INTO [dbo].[StresSQLStats] ( Test
												 ,Threads
												 ,StartTime )
			VALUES ( @Test
					,@i
					,GETDATE());
			IF @CommitBatchSize > 1
			BEGIN
				SET @PshCmd = 'PowerShell.exe -noprofile -command ' + '"' +
								'for($i=1; $i -le ' + CAST(@i AS char(2)) + '; $i++) { ' +
									'Start-Job { Invoke-sqlcmd -Database ' + @DatabaseName +
									' -ServerInstance ' + @Server + 
									' -Query \"EXECUTE ' + @Procedure1 + ' @TransactionsPerThread = ' + CAST(@TransactionsPerThread AS VARCHAR) +
									', @CommitBatchSize = ' + CAST(@CommitBatchSize AS VARCHAR) + '\" }';
			END
			ELSE
			BEGIN
				SET @PshCmd = 'PowerShell.exe -noprofile -command ' + '"' +
								'for($i=1; $i -le ' + CAST(@i AS char(2)) + '; $i++) { ' +
									'Start-Job { Invoke-sqlcmd -Database ' + @DatabaseName +
									' -ServerInstance ' + @Server + 
									' -Query \"EXECUTE ' + @Procedure1 + ' @TransactionsPerThread = ' + CAST(@TransactionsPerThread AS VARCHAR) + '\" }';
			END;
		
			IF @Procedure2 <> 'NO POP PROCEDURE'
			BEGIN
				IF @CommitBatchSize > 1
				BEGIN
					SET @PshCmd += ';Start-Job { Invoke-sqlcmd -Database ' + @DatabaseName +
										' -ServerInstance ' + @Server + 
										' -Query \"EXECUTE ' + @Procedure2 + ' @TransactionsPerThread = ' + CAST(@TransactionsPerThread AS VARCHAR) +
										', @CommitBatchSize = ' + CAST(@CommitBatchSize AS VARCHAR) + '\" }';
				END
				ELSE
				BEGIN
					SET @PshCmd += ';Start-Job { Invoke-sqlcmd -Database ' + @DatabaseName +
										' -ServerInstance ' + @Server + 
										' -Query \"EXECUTE ' + @Procedure2 + ' @TransactionsPerThread = ' + CAST(@TransactionsPerThread AS VARCHAR) + '\" }';
				END;
			END;

			SET @PshCmd += '}; while (Get-Job -state running) { Start-Sleep -Seconds 1 }"';

			SELECT @PshCmd AS [@PshCmd];

			DBCC SQLPERF("sys.dm_os_spinlock_stats", clear)
			DBCC SQLPERF("sys.dm_os_latch_stats"   , clear)
			DBCC SQLPERF("sys.dm_os_wait_stats"    , clear)

			SET @StartTime = GETDATE();	

			EXECUTE xp_cmdshell @PshCmd;

			IF DATEDIFF(ms, @StartTime, GETDATE()) > 0
			BEGIN
				UPDATE  [dbo].[StresSQLStats]
				SET     [TransactionRate] = ((@i * @TransactionsPerThread) * CAST(1000 AS bigint)
											 / CAST(DATEDIFF(ms, @StartTime, GETDATE()) AS bigint))
					   ,[EndTime]         = GETDATE()
				WHERE  Threads = @i
				AND    Test    = @Test;

				DELETE FROM @WaitStats;

				WITH [Waits] AS (SELECT  [wait_type]
										,[wait_time_ms] / 1000.0                              AS [WaitS]
										,([wait_time_ms] - [signal_wait_time_ms]) / 1000.0    AS [ResourceS]
										,[signal_wait_time_ms] / 1000.0                       AS [SignalS]
										,[waiting_tasks_count]                                AS [WaitCount]
										,100.0 * [wait_time_ms] / SUM ([wait_time_ms]) OVER() AS [Percentage]
										,ROW_NUMBER() OVER(ORDER BY [wait_time_ms] DESC)      AS [RowNum]
								 FROM    sys.dm_os_wait_stats
								 WHERE   [wait_type] NOT IN ( N'BROKER_EVENTHANDLER', N'BROKER_RECEIVE_WAITFOR',
															  N'BROKER_TASK_STOP', N'BROKER_TO_FLUSH',
															  N'BROKER_TRANSMITTER', N'CHECKPOINT_QUEUE',
															  N'CHKPT', N'CLR_AUTO_EVENT',
															  N'CLR_MANUAL_EVENT', N'CLR_SEMAPHORE',
															  -- Maybe uncomment these four if you have mirroring issues
															  N'DBMIRROR_DBM_EVENT', N'DBMIRROR_EVENTS_QUEUE',
															  N'DBMIRROR_WORKER_QUEUE', N'DBMIRRORING_CMD',
															  N'DIRTY_PAGE_POLL', N'DISPATCHER_QUEUE_SEMAPHORE',
															  N'EXECSYNC', N'FSAGENT',
															  N'FT_IFTS_SCHEDULER_IDLE_WAIT', N'FT_IFTSHC_MUTEX',
															  -- Maybe uncomment these six if you have AG issues
															  N'HADR_CLUSAPI_CALL', N'HADR_FILESTREAM_IOMGR_IOCOMPLETION',
															  N'HADR_LOGCAPTURE_WAIT', N'HADR_NOTIFICATION_DEQUEUE',
															  N'HADR_TIMER_TASK', N'HADR_WORK_QUEUE',
															  N'KSOURCE_WAKEUP', N'LAZYWRITER_SLEEP',
															  N'LOGMGR_QUEUE', N'MEMORY_ALLOCATION_EXT',
															  N'ONDEMAND_TASK_QUEUE',
															  N'PREEMPTIVE_XE_GETTARGETSTATE',
															  N'PWAIT_ALL_COMPONENTS_INITIALIZED',
															  N'PWAIT_DIRECTLOGCONSUMER_GETNEXT',
															  N'QDS_PERSIST_TASK_MAIN_LOOP_SLEEP', N'QDS_ASYNC_QUEUE',
															  N'QDS_CLEANUP_STALE_QUERIES_TASK_MAIN_LOOP_SLEEP',
															  N'QDS_SHUTDOWN_QUEUE', N'REDO_THREAD_PENDING_WORK',
															  N'REQUEST_FOR_DEADLOCK_SEARCH', N'RESOURCE_QUEUE',
															  N'SERVER_IDLE_CHECK', N'SLEEP_BPOOL_FLUSH',
															  N'SLEEP_DBSTARTUP', N'SLEEP_DCOMSTARTUP',
															  N'SLEEP_MASTERDBREADY', N'SLEEP_MASTERMDREADY',
															  N'SLEEP_MASTERUPGRADED', N'SLEEP_MSDBSTARTUP',
															  N'SLEEP_SYSTEMTASK', N'SLEEP_TASK',
															  N'SLEEP_TEMPDBSTARTUP', N'SNI_HTTP_ACCEPT',
															  N'SP_SERVER_DIAGNOSTICS_SLEEP', N'SQLTRACE_BUFFER_FLUSH',
															  N'SQLTRACE_INCREMENTAL_FLUSH_SLEEP',
															  N'SQLTRACE_WAIT_ENTRIES', N'WAIT_FOR_RESULTS',
															  N'WAITFOR', N'WAITFOR_TASKSHUTDOWN',
															  N'WAIT_XTP_RECOVERY',
															  N'WAIT_XTP_HOST_WAIT', N'WAIT_XTP_OFFLINE_CKPT_NEW_LOG',
															  N'WAIT_XTP_CKPT_CLOSE', N'XE_DISPATCHER_JOIN',
															  N'XE_DISPATCHER_WAIT', N'XE_TIMER_EVENT',
															  N'PREEMPTIVE_XE_DISPATCHER', N'CXPACKET',
															  N'PREEMPTIVE_OS_PIPEOPS', N'PREEMPTIVE_XE_CALLBACKEXECUTE')
								 AND     [waiting_tasks_count] > 0
								)
				INSERT INTO @WaitStats (
						  [Rank]       
						 ,[WaitType]   
						 ,[Wait_S]     
						 ,[WaitCount]  
						 ,[Percentage] 
						 ,[AvgWait_S]  
				)
				SELECT TOP 5 W1.RowNum                                                        AS [Rank]
					  ,MAX ([W1].[wait_type])                                                 AS [WaitType]
					  ,CAST (MAX ([W1].[WaitS]) AS DECIMAL (16,2))                            AS [Wait_S]
					  ,MAX ([W1].[WaitCount])                                                 AS [WaitCount]
					  ,CAST (MAX ([W1].[Percentage]) AS DECIMAL (5,2))                        AS [Percentage]
					  ,CAST ((MAX ([W1].[WaitS]) / MAX ([W1].[WaitCount])) AS DECIMAL (16,4)) AS [AvgWait_S]
				FROM   [Waits] AS [W1]
				JOIN   [Waits] AS [W2]
				ON     [W2].[RowNum] <= [W1].[RowNum]
				GROUP  BY [W1].[RowNum]
				HAVING SUM ([W2].[Percentage]) - MAX( [W1].[Percentage] ) < 95 -- percentage threshold
				ORDER  BY CAST (MAX ([W1].[WaitS]) AS DECIMAL (16,2)) DESC;

				UPDATE      ists
				SET         ists.[WaitType_1]   = wsts.[WaitType]
						   ,ists.[Wait_S_1]     = wsts.[Wait_S]
						   ,ists.[WaitCount_1]  = wsts.[WaitCount]
						   ,ists.[Percentage_1] = wsts.[Percentage]
						   ,ists.[AvgWait_S_1]  = wsts.[AvgWait_S]
				FROM        StresSQLStats AS ists
				CROSS JOIN  @WaitStats      AS wsts
				WHERE       ists.Threads = @i
				AND         ists.Test    = @Test
				AND         wsts.[Rank]  = 1;

				UPDATE      ists
				SET         ists.[WaitType_2]   = wsts.[WaitType]
						   ,ists.[Wait_S_2]     = wsts.[Wait_S]
						   ,ists.[WaitCount_2]  = wsts.[WaitCount]
						   ,ists.[Percentage_2] = wsts.[Percentage]
						   ,ists.[AvgWait_S_2]  = wsts.[AvgWait_S]
				FROM        StresSQLStats AS ists
				CROSS JOIN  @WaitStats      AS wsts
				WHERE       ists.Threads = @i
				AND         ists.Test    = @Test
				AND         wsts.[Rank]  = 2;

 				UPDATE      ists
				SET         ists.[WaitType_3]   = wsts.[WaitType]
						   ,ists.[Wait_S_3]     = wsts.[Wait_S]
						   ,ists.[WaitCount_3]  = wsts.[WaitCount]
						   ,ists.[Percentage_3] = wsts.[Percentage]
						   ,ists.[AvgWait_S_3]  = wsts.[AvgWait_S]
				FROM        StresSQLStats AS ists
				CROSS JOIN  @WaitStats      AS wsts
				WHERE       ists.Threads = @i
				AND         ists.Test    = @Test
				AND         wsts.[Rank]  = 3;

 				UPDATE      ists
				SET         ists.[WaitType_4]   = wsts.[WaitType]
						   ,ists.[Wait_S_4]     = wsts.[Wait_S]
						   ,ists.[WaitCount_4]  = wsts.[WaitCount]
						   ,ists.[Percentage_4] = wsts.[Percentage]
						   ,ists.[AvgWait_S_4]  = wsts.[AvgWait_S]
				FROM        StresSQLStats AS ists
				CROSS JOIN  @WaitStats      AS wsts
				WHERE       ists.Threads = @i
				AND         ists.Test    = @Test
				AND         wsts.[Rank]  = 4;

 				UPDATE      ists
				SET         ists.[WaitType_5]   = wsts.[WaitType]
						   ,ists.[Wait_S_5]     = wsts.[Wait_S]
						   ,ists.[WaitCount_5]  = wsts.[WaitCount]
						   ,ists.[Percentage_5] = wsts.[Percentage]
						   ,ists.[AvgWait_S_5]  = wsts.[AvgWait_S]
				FROM        StresSQLStats AS ists
				CROSS JOIN  @WaitStats  AS wsts
				WHERE       ists.Threads = @i
				AND         ists.Test    = @Test
				AND         wsts.[Rank]  = 5;

				WITH Latch_CTE AS (
					SELECT    TOP 5 ROW_NUMBER() OVER(ORDER BY [wait_time_ms] DESC) AS [Rank]
							  ,latch_class
							  ,wait_time_ms 
					FROM      sys.dm_os_latch_stats
					WHERE     latch_class <> 'BUFFER'
					ORDER BY  wait_time_ms DESC)
				UPDATE      ists
				SET         ists.[latch_class_1]   = lsts.[latch_class]
						   ,ists.[wait_time_ms_1]  = lsts.[wait_time_ms]
				FROM        StresSQLStats AS ists
				CROSS JOIN  Latch_CTE   AS lsts
				WHERE       ists.Threads = @i
				AND         ists.Test    = @Test
				AND         lsts.[Rank]  = 1;

				WITH Latch_CTE AS (
					SELECT    TOP 5 ROW_NUMBER() OVER(ORDER BY [wait_time_ms] DESC) AS [Rank]
							 ,latch_class
							 ,wait_time_ms 
					FROM      sys.dm_os_latch_stats
					WHERE     latch_class <> 'BUFFER'
					ORDER BY  wait_time_ms DESC)
				UPDATE      ists
				SET         ists.[latch_class_2]   = lsts.[latch_class]
						   ,ists.[wait_time_ms_2]  = lsts.[wait_time_ms]
				FROM        StresSQLStats AS ists
				CROSS JOIN  Latch_CTE   AS lsts
				WHERE       ists.Threads = @i
				AND         ists.Test    = @Test
				AND         lsts.[Rank]  = 2;

				WITH Latch_CTE AS (
					SELECT    TOP 5 ROW_NUMBER() OVER(ORDER BY [wait_time_ms] DESC) AS [Rank]
							 ,latch_class
							 ,wait_time_ms 
					FROM      sys.dm_os_latch_stats
					WHERE     latch_class <> 'BUFFER'
					ORDER BY  wait_time_ms DESC)
				UPDATE      ists
				SET         ists.[latch_class_3]   = lsts.[latch_class]
						   ,ists.[wait_time_ms_3]  = lsts.[wait_time_ms]
				FROM        StresSQLStats AS ists
				CROSS JOIN  Latch_CTE   AS lsts
				WHERE       ists.Threads = @i
				AND         ists.Test    = @Test
				AND         lsts.[Rank]  = 3;

				WITH Latch_CTE AS (
					SELECT    TOP 5 ROW_NUMBER() OVER(ORDER BY [wait_time_ms] DESC) AS [Rank]
							 ,latch_class
							 ,wait_time_ms 
					FROM      sys.dm_os_latch_stats
					WHERE     latch_class <> 'BUFFER'
					ORDER BY  wait_time_ms DESC)
				UPDATE      ists
				SET         ists.[latch_class_4]   = lsts.[latch_class]
						   ,ists.[wait_time_ms_4]  = lsts.[wait_time_ms]
				FROM        StresSQLStats AS ists
				CROSS JOIN  Latch_CTE   AS lsts
				WHERE       ists.Threads = @i
				AND         ists.Test    = @Test
				AND         lsts.[Rank]  = 4;

				WITH Latch_CTE AS (
					SELECT    TOP 5 ROW_NUMBER() OVER(ORDER BY [wait_time_ms] DESC) AS [Rank]
							 ,latch_class
							 ,wait_time_ms 
					FROM      sys.dm_os_latch_stats
					WHERE     latch_class <> 'BUFFER'
					ORDER BY  wait_time_ms DESC)
				UPDATE      ists
				SET         ists.[latch_class_5]   = lsts.[latch_class]
						   ,ists.[wait_time_ms_5]  = lsts.[wait_time_ms]
				FROM        StresSQLStats AS ists
				CROSS JOIN  Latch_CTE   AS lsts
				WHERE       ists.Threads = @i
				AND         ists.Test    = @Test
				AND         lsts.[Rank]  = 5;

				DELETE FROM @SpinlockStats;

				INSERT INTO @SpinlockStats (
						  [Rank]                
						 ,[name]                
						 ,[collisions]          
						 ,[spins]               
						 ,[spins_per_collision] 
						 ,[sleep_time]          
						 ,[backoffs]            
				)
				SELECT    TOP 5 ROW_NUMBER() OVER(ORDER BY [spins] DESC) AS [Rank]
						 ,name
						 ,collisions
						 ,spins
						 ,spins_per_collision
						 ,sleep_time
						 ,backoffs
				FROM     sys.dm_os_spinlock_stats
				ORDER BY spins DESC;
		
				UPDATE      ists
				SET          [spinlock_name_1]       = ssts.name
							,[spins_1]               = ssts.spins
							,[collisions_1]          = ssts.collisions
							,[backoffs_1]            = ssts.backoffs
							,[sleep_time_1]          = ssts.sleep_time		
							,[spins_per_collision_1] = ssts.spins_per_collision
				FROM        StresSQLStats  AS ists
				CROSS JOIN  @SpinlockStats AS ssts
				WHERE       ists.Threads = @i
				AND         ists.Test    = @Test
				AND         ssts.[Rank]  = 1;

				UPDATE      ists
				SET          [spinlock_name_2]       = ssts.name
							,[spins_2]               = ssts.spins
							,[collisions_2]          = ssts.collisions
							,[backoffs_2]            = ssts.backoffs
							,[sleep_time_2]          = ssts.sleep_time		
							,[spins_per_collision_2] = ssts.spins_per_collision
				FROM        StresSQLStats  AS ists
				CROSS JOIN  @SpinlockStats AS ssts
				WHERE       ists.Threads = @i
				AND         ists.Test    = @Test
				AND         ssts.[Rank]  = 2;

				UPDATE      ists
				SET          [spinlock_name_3]       = ssts.name
							,[spins_3]               = ssts.spins
							,[collisions_3]          = ssts.collisions
							,[backoffs_3]            = ssts.backoffs
							,[sleep_time_3]          = ssts.sleep_time		
							,[spins_per_collision_3] = ssts.spins_per_collision
				FROM        StresSQLStats  AS ists
				CROSS JOIN  @SpinlockStats AS ssts
				WHERE       ists.Threads = @i
				AND         ists.Test    = @Test
				AND         ssts.[Rank]  = 3;

				UPDATE      ists
				SET          [spinlock_name_4]       = ssts.name
							,[spins_4]               = ssts.spins
							,[collisions_4]          = ssts.collisions
							,[backoffs_4]            = ssts.backoffs
							,[sleep_time_4]          = ssts.sleep_time		
							,[spins_per_collision_4] = ssts.spins_per_collision
				FROM        StresSQLStats  AS ists
				CROSS JOIN  @SpinlockStats AS ssts
				WHERE       ists.Threads = @i
				AND         ists.Test    = @Test
				AND         ssts.[Rank]  = 4;

				UPDATE      ists
				SET          [spinlock_name_5]       = ssts.name
							,[spins_5]               = ssts.spins
							,[collisions_5]          = ssts.collisions
							,[backoffs_5]            = ssts.backoffs
							,[sleep_time_5]          = ssts.sleep_time		
							,[spins_per_collision_5] = ssts.spins_per_collision
				FROM        StresSQLStats  AS ists
				CROSS JOIN  @SpinlockStats AS ssts
				WHERE       ists.Threads = @i
				AND         ists.Test    = @Test
				AND         ssts.[Rank]  = 5;
			END;	
        END;
		
		SET @i += 1;
	END;
END;
GO
PRINT N'Creating [dbo].[usp_LmaxPopDiskNoSequence]...';


GO

CREATE PROCEDURE [dbo].[usp_LmaxPopDiskNoSequence] @TransactionsPerThread int = 200000
AS 
BEGIN 
    DECLARE  @MessagePopped int
            ,@i             int = 0;

    SET NOCOUNT ON;

	WHILE @i <= @TransactionsPerThread 
	BEGIN
		EXEC dbo.usp_PopMessageDiskNoSequence @MessagePopped OUTPUT; 
		SET @i += 1;
	END;
END;
GO
PRINT N'Creating [dbo].[usp_LmaxPopDiskNumaNoSequence]...';


GO
 

CREATE PROCEDURE [dbo].[usp_LmaxPopDiskNumaNoSequence] @TransactionsPerThread int = 200000
AS 
BEGIN 
    DECLARE  @MessagePopped int
            ,@Slot          int
            ,@i             int = 0;

    SET NOCOUNT ON;

	IF EXISTS (SELECT 1
               FROM   sys.dm_exec_requests r
               JOIN   sys.dm_os_workers    w
               ON     r.task_address = w.task_address
               JOIN   sys.dm_os_schedulers s
               ON     s.scheduler_address = w.scheduler_address
               WHERE  r.session_id     = @@SPID
			   AND    s.parent_node_id = 0)
	BEGIN
		WHILE @i <= @TransactionsPerThread 
		BEGIN
			EXEC dbo.usp_PopMessageDiskNoSequenceNode0 @MessagePopped OUTPUT; 
			SET @i += 1;
		END;
	END
	ELSE
	BEGIN
		WHILE @i <= @TransactionsPerThread
		BEGIN
			EXEC dbo.usp_PopMessageDiskNoSequenceNode1 @MessagePopped OUTPUT; 
			SET @i += 1;
		END;
	END
END;
GO
PRINT N'Creating [dbo].[usp_LmaxPopDiskNumaSequence]...';


GO


CREATE PROCEDURE [dbo].[usp_LmaxPopDiskNumaSequence] @TransactionsPerThread int = 200000
AS 
BEGIN 
    DECLARE  @MessagePopped int
            ,@Slot          int
            ,@i             int = 0;

    SET NOCOUNT ON;

	IF EXISTS (SELECT 1
               FROM   sys.dm_exec_requests r
               JOIN   sys.dm_os_workers    w
               ON     r.task_address = w.task_address
               JOIN   sys.dm_os_schedulers s
               ON     s.scheduler_address = w.scheduler_address
               WHERE  r.session_id     = @@SPID
			   AND    s.parent_node_id = 0)
	BEGIN
		WHILE @i <= @TransactionsPerThread 
		BEGIN
			EXEC dbo.usp_PopMessageDiskSequenceNode0 @MessagePopped OUTPUT; 
			SET @i += 1;
		END;
	END
	ELSE
	BEGIN
		WHILE @i <= @TransactionsPerThread 
		BEGIN
			EXEC dbo.usp_PopMessageDiskSequenceNode1 @MessagePopped OUTPUT; 
			SET @i += 1;
		END;
	END
END;
GO
PRINT N'Creating [dbo].[usp_LmaxPopDiskSequence]...';


GO

CREATE PROCEDURE [dbo].[usp_LmaxPopDiskSequence] @TransactionsPerThread int = 200000
AS 
BEGIN 
    DECLARE  @MessagePopped int
            ,@Slot          int
            ,@i             int = 0;

    SET NOCOUNT ON;

	WHILE @i <= @TransactionsPerThread
	BEGIN
		EXEC dbo.usp_PopMessageDiskSequence @MessagePopped OUTPUT; 
		SET @i += 1;
	END;
END;
GO
PRINT N'Creating [dbo].[usp_LmaxPushDiskNoSequence]...';


GO

CREATE PROCEDURE [dbo].[usp_LmaxPushDiskNoSequence] @TransactionsPerThread int = 200000
AS 
BEGIN 
    DECLARE  @MessagePopped int
            ,@i             int = 0;

    SET NOCOUNT ON;

	WHILE @i <= @TransactionsPerThread 
	BEGIN
		EXEC dbo.usp_PushMessageDiskNoSequence @MessagePopped OUTPUT; 
		SET @i += 1;
	END;
END;
GO
PRINT N'Creating [dbo].[usp_LmaxPushDiskNumaNoSequence]...';


GO

CREATE PROCEDURE [dbo].[usp_LmaxPushDiskNumaNoSequence] @TransactionsPerThread int = 200000
AS 
BEGIN 
    DECLARE  @MessagePushed int
            ,@Slot          int
            ,@i             int = 0;

    SET NOCOUNT ON;

	IF EXISTS (SELECT 1
               FROM   sys.dm_exec_requests r
               JOIN   sys.dm_os_workers    w
               ON     r.task_address = w.task_address
               JOIN   sys.dm_os_schedulers s
               ON     s.scheduler_address = w.scheduler_address
               WHERE  r.session_id     = @@SPID
			   AND    s.parent_node_id = 0)
	BEGIN
		WHILE @i <= @TransactionsPerThread 
		BEGIN
			EXEC dbo.usp_PushMessageDiskNoSequenceNode0 @MessagePushed OUTPUT; 
			SET @i += 1;
		END;
	END
	ELSE
	BEGIN
		WHILE @i <= @TransactionsPerThread
		BEGIN
			EXEC dbo.usp_PushMessageDiskNoSequenceNode1 @MessagePushed OUTPUT; 
			SET @i += 1;
		END;
	END
END;
GO
PRINT N'Creating [dbo].[usp_LmaxPushDiskNumaSequence]...';


GO

CREATE PROCEDURE [dbo].[usp_LmaxPushDiskNumaSequence] @TransactionsPerThread int = 200000
AS 
BEGIN 
    DECLARE  @MessagePushed int
            ,@Slot          int
            ,@i             int = 0;

    SET NOCOUNT ON;

	IF EXISTS (SELECT 1
               FROM   sys.dm_exec_requests r
               JOIN   sys.dm_os_workers    w
               ON     r.task_address = w.task_address
               JOIN   sys.dm_os_schedulers s
               ON     s.scheduler_address = w.scheduler_address
               WHERE  r.session_id     = @@SPID
			   AND    s.parent_node_id = 0)
	BEGIN
		WHILE @i <= @TransactionsPerThread 
		BEGIN
			EXEC dbo.usp_PushMessageDiskSequenceNode0 @MessagePushed OUTPUT; 
			SET @i += 1;
		END;
	END
	ELSE
	BEGIN
		WHILE @i <= @TransactionsPerThread 
		BEGIN
			EXEC dbo.usp_PushMessageDiskSequenceNode1 @MessagePushed OUTPUT; 
			SET @i += 1;
		END;
	END
END;
GO
PRINT N'Creating [dbo].[usp_LmaxPushDiskSequence]...';


GO

CREATE PROCEDURE [dbo].[usp_LmaxPushDiskSequence] @TransactionsPerThread int = 200000
AS 
BEGIN 
    DECLARE  @MessagePushed int
            ,@Slot          int
            ,@i             int = 0;

    SET NOCOUNT ON;

	WHILE @i <= @TransactionsPerThread 
	BEGIN
		EXEC dbo.usp_PushMessageDiskSequence @MessagePushed OUTPUT; 
		SET @i += 1;
	END;
END;
GO
PRINT N'Creating [dbo].[usp_LmaxPushImOltpNoSequence]...';


GO
CREATE PROCEDURE [dbo].[usp_LmaxPushImOltpNoSequence] @TransactionsPerThread int = 200000 
AS 
BEGIN 
    DECLARE @i int = 0;

    WHILE @i <= @TransactionsPerThread 
    BEGIN
        EXEC dbo.usp_PushMessageImOltpNoSequence;
		SET @i += 1;
    END;
END;
GO
PRINT N'Creating [dbo].[usp_LmaxPushImOltpSequence]...';


GO
CREATE PROCEDURE [dbo].[usp_LmaxPushImOltpSequence] @TransactionsPerThread int = 200000
AS 
BEGIN 
    DECLARE  @QueueSize     INT = 4000000
	        ,@MessagePushed INT
            ,@Slot          INT
	        ,@i             INT = 0;

    WHILE @i <= @TransactionsPerThread 
    BEGIN
	    SET @MessagePushed = 0;

		WHILE @MessagePushed = 0
		BEGIN
	        SELECT @Slot = NEXT VALUE FOR [dbo].[PushSequence] % @QueueSize
            EXEC dbo.usp_PushMessageImOltpSequence @Slot, @MessagePushed OUTPUT;
		END;

		SET @i += 1;
    END;
END;
GO
EXECUTE [dbo].[usp_LMaxDiskQSlotInit];
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
